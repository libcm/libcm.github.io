<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>落秋的笔记小屋</title>
  
  <subtitle>笔记小屋</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liyb.club/"/>
  <updated>2019-01-29T10:02:35.127Z</updated>
  <id>http://liyb.club/</id>
  
  <author>
    <name>liyb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给自己git项目添加pod支持</title>
    <link href="http://liyb.club/2018/11/27/%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84Git%E4%BB%93%E5%BA%93%E6%B7%BB%E5%8A%A0pod%E6%94%AF%E6%8C%81/"/>
    <id>http://liyb.club/2018/11/27/给自己的Git仓库添加pod支持/</id>
    <published>2018-11-27T07:39:08.940Z</published>
    <updated>2019-01-29T10:02:35.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h1><ol><li>进<a href="https://github.com/" target="_blank" rel="noopener">github</a>，登录自己账号。如果没有自行注册。</li><li>创建个新仓库<br><img src="/image/pod/创建仓库.png" alt="创建仓库"> </li><li>把项目clone到本地</li><li>把自己需要添加pod支持的库添加进刚才clone的项目中</li></ol><h1 id="添加pod支持"><a href="#添加pod支持" class="headerlink" title="添加pod支持"></a>添加pod支持</h1><h2 id="创建podspec文件"><a href="#创建podspec文件" class="headerlink" title="创建podspec文件"></a>创建podspec文件</h2><pre><code>$ cd 刚才clone的项目路径$ pod spec create 发布的名</code></pre><h2 id="编辑podspec文件"><a href="#编辑podspec文件" class="headerlink" title="编辑podspec文件"></a>编辑podspec文件</h2><p><img src="/image/pod/podspec文件.png" alt="编辑podspec"></p><h2 id="设置release版本"><a href="#设置release版本" class="headerlink" title="设置release版本"></a>设置release版本</h2><pre><code>首先上传本地仓库至github</code></pre><p><img src="/image/pod/release.png" alt=""></p><pre><code>点击release，此处我以添加过，所以显示为1</code></pre><p><img src="/image/pod/version.png" alt=""></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><pre><code>$ pod lib lint podspec文件名.podspec结果多种多样根据错误提示进行修改podspec文件，如果没有错误只有警告，可以使用下面的命令进行忽略$ pod lib lint podspec文件名.podspec —allow-warnings看到 xxx passed validation 说明成功</code></pre><h2 id="注册Cocoapods账号"><a href="#注册Cocoapods账号" class="headerlink" title="注册Cocoapods账号"></a>注册Cocoapods账号</h2><pre><code>$ pod trunk register 邮箱地址 &apos;用户名&apos;  —description=&apos;描述信息&apos;注: 用户名和描述信息带引号之后进入邮箱进行验证就可以了</code></pre><h2 id="上传代码到Cocoapods"><a href="#上传代码到Cocoapods" class="headerlink" title="上传代码到Cocoapods"></a>上传代码到Cocoapods</h2><pre><code>$ pod trunk push podspec文件路径成功后可以使用pod search进行查看如果pod search搜不到，可以进入此文件夹下`~/Library/Caches/CocoaPods/`删除`search_index.json`文件</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建git仓库&quot;&gt;&lt;a href=&quot;#创建git仓库&quot; class=&quot;headerlink&quot; title=&quot;创建git仓库&quot;&gt;&lt;/a&gt;创建git仓库&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;进&lt;a href=&quot;https://github.com/&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="iOS" scheme="http://liyb.club/categories/iOS/"/>
    
    
      <category term="Other" scheme="http://liyb.club/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>Protocal Buffers for iOS的安装及使用(使用篇)</title>
    <link href="http://liyb.club/2018/11/27/Protocal%20Buffers%20for%20iOS%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8(%E4%BD%BF%E7%94%A8%E7%AF%87)/"/>
    <id>http://liyb.club/2018/11/27/Protocal Buffers for iOS的安装及使用(使用篇)/</id>
    <published>2018-11-27T07:39:08.939Z</published>
    <updated>2019-01-29T10:02:45.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><ul><li><p>1.从<a href="https://github.com/google/protobuf.git" target="_blank" rel="noopener">https://github.com/google/protobuf.git</a>下载源码，解压，里面有支持不同语言的版本源码，我们只需要里面的支持objc的文件夹名为：<code>objectivec</code></p><p>  <img src="/image/ProtocalBuffers/1-1.png" alt="1-1"></p></li><li><p>2.新建一个工程命名为<code>ProtocolBufferTest</code>，创建一个文件夹，假设命名为：<code>protocolbuf</code>， 把第一步的pb源码复制到此文件夹中：</p><p>  <img src="/image/ProtocalBuffers/2-1.png" alt="2-1"></p></li><li><p>3.使用Xcode打开工程，点击左下角<code>+</code>， 引用<code>protocolBuffer</code>源文件到工程中<br>(源文件里面有两个工程配置文件：<code>ProtocolBuffers_iOS.xcodeproj</code>和<code>ProtocolBuffers_OSX.xcodeproj</code>，引用<code>ProtocolBuffers_iOS.xcodeproj</code>就好)</p><p>  <img src="/image/ProtocalBuffers/3-1.png" alt="3-1"><br>  <img src="/image/ProtocalBuffers/3-2.png" alt="3-2"></p></li><li><p>4.选中工程: <code>targets</code>—&gt;<code>Build Phases</code>—&gt;<code>Link Binary With Libraries</code>， 引用源码静态库文件：<code>libProtocolBuffers.a</code></p><p>  <img src="/image/ProtocalBuffers/4-1.png" alt="4-1"></p></li><li><p>5.在工程设置搜索静态库的头文件（pb文件在protocolbuf文件夹里面）:<br><code>targets</code>—&gt;<code>Build Setting</code>—&gt;<code>Search Paths</code>—&gt;<code>Header Search Paths</code>, 写入：<code>$(PROJECT)/protocolbuf</code></p><p>   <img src="/image/ProtocalBuffers/5-1.png" alt="5-1"></p></li><li><p>6.编写测试文件<code>*.proto</code>，比如新建一个文件<code>Person.proto</code>, 按照官方标准语法<code>https://developers.google.com/protocol-buffers/</code> 编写通用代码，写好后在终端进入该<code>Person.proto</code>文件所在目录，使用protoc命令：<code>protoc *.proto --objc_out=../Pro_out</code> 进行编译。把<code>Person.proto</code>文件编译成<code>Person.pbobjc.h</code>和<code>Person.pbobjc.m</code>, 生成的文件在<code>Pro_out</code>文件夹里面。如果<code>Person.proto</code>源文件有语法问题，编译时会报错；当编译时什么提示都没有，表示编译成功：将编译好的<code>*.pbobjc.h</code>和<code>*.pbobjc.m</code>拖入工程中，因为不支持arc, 所以需要在<code>*.pbobjc.m</code>设置<code>-fno-objc-arc</code>, 然后就可以使用了</p><p>   <img src="/image/ProtocalBuffers/6-1.png" alt="6-1"><br>   <img src="/image/ProtocalBuffers/6-2.png" alt="6-2"><br>   <img src="/image/ProtocalBuffers/6-3.png" alt="6-3"><br>   <img src="/image/ProtocalBuffers/6-4.png" alt="6-4"></p></li><li><p>7.序列化与反序列化</p><pre><code>Person *p = [[Person alloc] init];p.name = @&quot;xiao&quot;;p.age = 2;p.address = @&quot;哈哈哈&quot;;NSLog(@&quot;name:%@, age:%zi, address:%@&quot;, p.name, p.age, p.address);//    序列化NSData *data = [p data];NSLog(@&quot;data:%@&quot;, data);//    反序列化    NSError *error;Person *per = [Person parseFromData:data error:&amp;error];if (!error) {    NSLog(@&quot;_____name:%@, age:%zi, address:%@_____&quot;, per.name, per.age, per.address);}</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;h2 id=&quot;下载源码&quot;&gt;&lt;a href=&quot;#下载源码&quot; class=&quot;headerlink&quot; title=&quot;下载源码&quot;&gt;&lt;/a&gt;下载源码&lt;/h
      
    
    </summary>
    
      <category term="iOS" scheme="http://liyb.club/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://liyb.club/tags/Objective-C/"/>
    
      <category term="Protocal Buffers" scheme="http://liyb.club/tags/Protocal-Buffers/"/>
    
  </entry>
  
  <entry>
    <title>Protocal Buffers for iOS的安装及使用(安装篇)</title>
    <link href="http://liyb.club/2018/11/27/Protocl%20Buffers%20for%20iOS%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%AE%89%E8%A3%85%E7%AF%87)/"/>
    <id>http://liyb.club/2018/11/27/Protocl Buffers for iOS安装及使用(安装篇)/</id>
    <published>2018-11-27T07:39:08.939Z</published>
    <updated>2019-01-29T10:02:51.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装Protocal-Buffers"><a href="#安装Protocal-Buffers" class="headerlink" title="安装Protocal Buffers"></a>安装Protocal Buffers</h2><ul><li><p>执行 <code>brew -v</code> 命令</p><p>  这条命令是查看你的mac里面有没有装brew。brew是mac os里面，类似于ubuntu的apt-get的功能，都可以直接在终端输入命令然后安装程序。－v自然就是版本version的意思</p></li><li><p>下载brew安装环境</p><pre><code>ruby -e $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</code></pre></li><li><p>分别执行下面三条命令</p><pre><code>brew install automakebrew install libtoolbrew install protobuf</code></pre><p>  就是利用brew下载安装了。protobuf就是我们想要的，另外两个是依赖库</p></li></ul><h2 id="clone-Protocal-Buffers库"><a href="#clone-Protocal-Buffers库" class="headerlink" title="clone Protocal Buffers库"></a>clone Protocal Buffers库</h2><ul><li><p>执行下列命令</p><pre><code>git clone https://github.com/alexeyxo/protobuf-objc.git./build.sh</code></pre><p>  从github下载protobuf－objc这个工程，build脚本里面做的是编译</p><p>  注意：编译工程过程中，有可能会出现错误。别慌！看编译错误的提示。一般错误只是因为环境变量和路径没有配置好，少了一些东西，例如少了编译protobuf这个工程的依赖库，按照提示添加路径即可。有了工程以后，我们就可以开始测试一下怎么用protobuf了</p></li></ul><h2 id="导入工程"><a href="#导入工程" class="headerlink" title="导入工程"></a>导入工程</h2><ul><li><p>打开Xcode！新建一个工程！ 然后有两个方法把protobuf添加到你的工程里面，一个是直接添加，一个是利用cocoapod 强烈推荐后者，因为cocoapods能够很方便的管理第三方类库，以后人家的工程升级了，你只需要一行 pod update 就ok了。关于安装和使用cocoapod，属于另一个话题，在Podfile添加下面这个句子</p><pre><code>platform :ios , 8.0pod ProtocolBuffers,</code></pre><p>  在保存之后，到终端，cd到工程里面，</p><pre><code>pod install</code></pre><p>  等一会，cocoapod就会帮我们添加好，以后我们就应该打开 project的workspace，因为添加了pod作为子工程。</p></li></ul><h2 id="创建Protocal-Buffers文件"><a href="#创建Protocal-Buffers文件" class="headerlink" title="创建Protocal Buffers文件"></a>创建Protocal Buffers文件</h2><ul><li><p>在你的工程里面，新建一个文件夹，假如命名叫Protobuf 在这个文件夹里面新建一个proto文件。例如要在本地储存用户信息，那么就新建一个user.proto 里面内容可以如下</p><pre><code>syntax = &quot;proto2&quot;;            // Protocal Buffers版本message PBUser {required string userId = 1;         // 用户IDoptional string nick = 2;            // 用户昵称optional string avatar = 3;        // 用户头像optional string password = 7;optional string email = 8;optional string mobile = 9;         // 手机号码optional string qqOpenId = 10;    // QQ IDoptional string sinaId = 11;         // SINA UserIDoptional string weixinId = 12;     // WeChat UserID}</code></pre><p>  上面这个例子包括了几个要素。 一个是包名。包的概念在object c里面没有，java里面有，c++里面namespace也是差不多意思。 顺便提一下，oc里面一般在库名前面添加两个字母，起的作用差不多就是包的作用，作为类的上一层组织结构。 例如官方的NS，例如AFNetworking这种第三方类库的AF。</p><p>  回到正题。编写pb文件，第二个要素是message 一个message就是一个整体，里面有哪些必要的内容，哪些可选的内容。详细的proto语法随便一找一大把，就不啰嗦了。</p></li></ul><h2 id="Protocal-Buffers文件转换"><a href="#Protocal-Buffers文件转换" class="headerlink" title="Protocal Buffers文件转换"></a>Protocal Buffers文件转换</h2><ul><li><p>写好了proto，接下来就是编译这个proto文件，protobuf－objc这个类库会编译声称一些源码，是读写proto数据的接口API。 编译命令如下： 先打开工程，建议单独新建一个文件夹作为输出路径，例如工程下新建文件夹Gen，用来放generate出来的.pb.h文件&amp;&amp;.pb.m文件 打开终端 cd到工程路径下</p><pre><code>protoc --plugin=/usr/local/bin/protoc-gen-objc person.proto --objc_out=./Gen</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;安装Protocal-Buffers&quot;&gt;&lt;a href=&quot;#安装Protocal-Buffers&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="iOS" scheme="http://liyb.club/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://liyb.club/tags/Objective-C/"/>
    
      <category term="Protocal Buffers" scheme="http://liyb.club/tags/Protocal-Buffers/"/>
    
  </entry>
  
  <entry>
    <title>Swift和Objective-C中的小知识</title>
    <link href="http://liyb.club/2018/11/27/Swift%E5%92%8CObjective-C/"/>
    <id>http://liyb.club/2018/11/27/Swift和Objective-C/</id>
    <published>2018-11-27T07:39:08.939Z</published>
    <updated>2019-01-29T10:03:04.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么swift推荐用struct？"><a href="#为什么swift推荐用struct？" class="headerlink" title="为什么swift推荐用struct？"></a>为什么swift推荐用struct？</h1><ul><li>struct是值类型，而非引用类型</li><li>值类型相对于引用类型是线程安全的</li><li>swift对值类型的拷贝进行了足够的优化</li><li>对enum、struct、function给予了更大的支持</li></ul><h1 id="swift是否支持runtime？"><a href="#swift是否支持runtime？" class="headerlink" title="swift是否支持runtime？"></a>swift是否支持runtime？</h1><ul><li>swift是静态语言，在编译时就确定了类型。oc是在运行的时候知道类型的。swift的效率要高一些。所以swift不建议使用runtime。</li><li>swift本身对runtime并不支持，需要在属性或者方法前面添加’dynamic’修饰符才能获取动态性，继承自NSObject的类起继承的弗雷的方法也具有动态性，子类的属性和方法也需要家’dynamic’才能获取动态性。</li></ul><h1 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h1><pre><code>const NSString * kSomeConstantString = @&quot;&quot;;const 类型 * 变量名：可以改变指针的指向，不能改变指针指向的内容.NSString * const kSomeConstantString = @&quot;&quot;;类型 * const 变量名：可以改变指针指向的内容，不能改变指针的指向.</code></pre><h1 id="NSString用copy或strong关键字的区别"><a href="#NSString用copy或strong关键字的区别" class="headerlink" title="NSString用copy或strong关键字的区别"></a>NSString用copy或strong关键字的区别</h1><pre><code>相同点:NSString是不可变，copy和strong都是分配一次内存不同点:copy会先判断NSString是不是可变的，如果是不可变就不在分配内存，是可变的就分配内存。strong不会判断NSString是不是可变的总结:如果大量运用NSString的话，如果确定NSString是不可变的就可以直接用strong</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么swift推荐用struct？&quot;&gt;&lt;a href=&quot;#为什么swift推荐用struct？&quot; class=&quot;headerlink&quot; title=&quot;为什么swift推荐用struct？&quot;&gt;&lt;/a&gt;为什么swift推荐用struct？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="iOS" scheme="http://liyb.club/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://liyb.club/tags/Objective-C/"/>
    
      <category term="Swift" scheme="http://liyb.club/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift高阶函数</title>
    <link href="http://liyb.club/2018/11/27/Swift%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>http://liyb.club/2018/11/27/Swift高阶函数/</id>
    <published>2018-11-27T07:39:08.939Z</published>
    <updated>2019-01-29T10:02:58.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li><p>转换，可以将数组中的元素格式进行转换</p><pre><code>// 将int数组转换成String数组// $0代表数组的元素let array = [1, 2, 3, 4, 5]let result = array.map {    String($0)}</code></pre></li></ul><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ul><li><p>过滤，可以对数组中元素按照某种规律进行过滤</p><pre><code>// 在array中过滤出偶数let result = array.filter {    $0 % 2 == 0}</code></pre></li></ul><h2 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h2><ul><li><p>计算，可以对数组中的元素进行计算</p><pre><code>// 计算数组array元素的和// 在这里$0和$1的意义不同，$0代表计算后的结果，$1代表元素// 10代表初始值，在这里可以理解为 $0初始值 = 10let result = array.reduce(10) {    $0 + $1} </code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;转换，可以将数组中的元素格式进行转换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 将int数组转换成String数组
//
      
    
    </summary>
    
      <category term="iOS" scheme="http://liyb.club/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://liyb.club/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Xcode警告忽略</title>
    <link href="http://liyb.club/2018/11/27/Xcode%E8%AD%A6%E5%91%8A%E5%BF%BD%E7%95%A5/"/>
    <id>http://liyb.club/2018/11/27/Xcode警告忽略/</id>
    <published>2018-11-27T07:39:08.939Z</published>
    <updated>2019-01-29T10:03:12.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><pre><code>在需要忽略警告的方法中使用一下代码标注即可:    #pragma clang diagnostic push#pragma clang diagnostic ignored &quot;警告类型&quot;// 需要忽略警告的代码#pragma clang diagnostic pop</code></pre><h1 id="警告类型"><a href="#警告类型" class="headerlink" title="警告类型"></a>警告类型</h1><p>原文地址:<a href="http://fuckingclangwarnings.com&amp;/" target="_blank" rel="noopener">点击这里跳转</a></p><h2 id="Semantic-Warnings-语义警告"><a href="#Semantic-Warnings-语义警告" class="headerlink" title="Semantic Warnings(语义警告)"></a>Semantic Warnings(语义警告)</h2><table><thead><tr><th style="text-align:left"><style> table th:first-of-type { width: 20%; } </style>Warning</th><th style="text-align:left"><style> table th:nth-of-type(2) { width: 80%; } </style>Message </th></tr></thead><tbody><tr><td style="text-align:left">-WCFString-literal</td><td style="text-align:left">input conversion stopped due to an input byte that does not belong to the input codeset UTF-8</td></tr><tr><td style="text-align:left">-WNSObject-attribute</td><td style="text-align:left">__attribute ((NSObject)) may be put on a typedef only, attribute is ignored</td></tr><tr><td style="text-align:left">-Wabstract-vbase-init</td><td style="text-align:left">initializer for virtual base class %0 of abstract class %1 will never be used</td></tr><tr><td style="text-align:left">-Waddress-of-array-temporary</td><td style="text-align:left">pointer is initialized by a temporary array, which will be destroyed at the end of the full-expression</td></tr><tr><td style="text-align:left">-Warc-maybe-repeated-use-of-weak</td><td style="text-align:left">“weak %select{variable&#124;property&#124;implicit property&#124;instance variable}0 %1 may be accessed multiple times in this %select{function&#124;method&#124;block&#124;lambda}2 and may be unpredictably set to nil assign to a strong variable to keep the object alive</td></tr><tr><td style="text-align:left">-Warc-non-pod-memaccess</td><td style="text-align:left">%select{destination for&#124;source of}0 this %1 call is a pointer to ownership-qualified type %2</td></tr><tr><td style="text-align:left">-Warc-performSelector-leaks</td><td style="text-align:left">performSelector may cause a leak because its selector is unknown</td></tr><tr><td style="text-align:left">-Warc-repeated-use-of-weak</td><td style="text-align:left">“weak %select{variable &#124;property&#124;implicit property&#124;instance variable}0 %1 is accessed multiple times in this %select{function&#124;method&#124;block&#124;lambda}2 but may be unpredictably set to nil assign to a strong variable to keep the object alive</td></tr><tr><td style="text-align:left">-Warc-retain-cycles</td><td style="text-align:left">capturing %0 strongly in this block is likely to lead to a retain cycle</td></tr><tr><td style="text-align:left">-Warc-unsafe-retained-assign</td><td style="text-align:left">assigning retained object to unsafe property object will be released after assignment</td></tr><tr><td style="text-align:left">-Warc-unsafe-retained-assign</td><td style="text-align:left">assigning %select{array literal&#124;dictionary literal&#124;numeric literal&#124;boxed expression&#124;should not happen&#124;block literal}0 to a weak %select{property&#124;variable}1 object will be released after assignment</td></tr><tr><td style="text-align:left">-Warc-unsafe-retained-assign</td><td style="text-align:left">assigning retained object to %select{weak&#124;unsafe_unretained}0 %select{property&#124;variable}1 object will be released after assignment</td></tr><tr><td style="text-align:left">-Warray-bounds</td><td style="text-align:left">array index %0 is past the end of the array (which contains %1 element%s2)</td></tr><tr><td style="text-align:left">-Warray-bounds</td><td style="text-align:left">array index %0 is before the beginning of the array</td></tr><tr><td style="text-align:left">-Warray-bounds</td><td style="text-align:left">‘static’ has no effect on zero-length arrays</td></tr><tr><td style="text-align:left">-Warray-bounds</td><td style="text-align:left">array argument is too small contains %0 elements, callee requires at least %1</td></tr><tr><td style="text-align:left">-Warray-bounds-pointer-arithmetic</td><td style="text-align:left">the pointer incremented by %0 refers past the end of the array (that contains %1 element%s2)</td></tr><tr><td style="text-align:left">-Warray-bounds-pointer-arithmetic</td><td style="text-align:left">the pointer decremented by %0 refers before the beginning of the array</td></tr><tr><td style="text-align:left">-Wassign-enum</td><td style="text-align:left">integer constant not in range of enumerated type %0</td></tr><tr><td style="text-align:left">-Watomic-property-with-user-defined-accessor</td><td style="text-align:left">writable atomic property %0 cannot pair a synthesized %select{getter&#124;setter}1 with a user defined %select{getter&#124;setter}2</td></tr><tr><td style="text-align:left">-Wattributes</td><td style="text-align:left">unknown attribute %0 ignored</td></tr><tr><td style="text-align:left">-Wauto-var-id</td><td style="text-align:left">‘auto’ deduced as ‘id’ in declaration of %0</td></tr><tr><td style="text-align:left">-Wavailability</td><td style="text-align:left">unknown platform %0 in availability macro</td></tr><tr><td style="text-align:left">-Wavailability</td><td style="text-align:left">overriding method %select{introduced after&#124;deprecated before&#124;obsoleted before}0 overridden method on %1 (%2 vs. %3)</td></tr><tr><td style="text-align:left">-Wavailability</td><td style="text-align:left">availability does not match previous declaration</td></tr><tr><td style="text-align:left">-Wavailability</td><td style="text-align:left">overriding method cannot be unavailable on %0 when its overridden method is available</td></tr><tr><td style="text-align:left">-Wavailability</td><td style="text-align:left">feature cannot be %select{introduced&#124;deprecated&#124;obsoleted}0 in %1 version %2 before it was %select{introduced&#124;deprecated&#124;obsoleted}3 in version %4 attribute ignored</td></tr><tr><td style="text-align:left">-Wbad-function-cast</td><td style="text-align:left">cast from function call of type %0 to non-matching type %1</td></tr><tr><td style="text-align:left">-Wbitfield-constant-conversion</td><td style="text-align:left">implicit truncation from %2 to bitfield changes value from %0 to %1</td></tr><tr><td style="text-align:left">-Wbitwise-op-parentheses</td><td style="text-align:left">‘&amp;’ within &#124;</td></tr><tr><td style="text-align:left">-Wbool-conversion</td><td style="text-align:left">“initialization of pointer of type %0 to null from a constant boolean “ “expression</td></tr><tr><td style="text-align:left">-Wbridge-cast</td><td style="text-align:left">%0 cannot bridge to %1</td></tr><tr><td style="text-align:left">-Wbridge-cast</td><td style="text-align:left">%0 bridges to %1, not %2</td></tr><tr><td style="text-align:left">-Wbuiltin-requires-header</td><td style="text-align:left">declaration of built-in function ‘%0’ requires inclusion of the header stdio.h</td></tr><tr><td style="text-align:left">-Wbuiltin-requires-header</td><td style="text-align:left">declaration of built-in function ‘%0’ requires inclusion of the header setjmp.h</td></tr><tr><td style="text-align:left">-Wbuiltin-requires-header</td><td style="text-align:left">declaration of built-in function ‘%0’ requires inclusion of the header ucontext.h</td></tr><tr><td style="text-align:left">-Wc++-compat</td><td style="text-align:left">%select{&#124;empty }0%select{struct&#124;union}1 has size 0 in C, %select{size 1&#124;non-zero size}2 in C++</td></tr><tr><td style="text-align:left">-Wc++11-compat</td><td style="text-align:left">explicit instantiation cannot be ‘inline’</td></tr><tr><td style="text-align:left">-Wc++11-compat</td><td style="text-align:left">explicit instantiation of %0 must occur at global scope</td></tr><tr><td style="text-align:left">-Wc++11-compat</td><td style="text-align:left">explicit instantiation of %0 not in a namespace enclosing %1</td></tr><tr><td style="text-align:left">-Wc++11-compat</td><td style="text-align:left">explicit instantiation of %q0 must occur in namespace %1</td></tr><tr><td style="text-align:left">-Wc++11-narrowing</td><td style="text-align:left">constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</td></tr><tr><td style="text-align:left">-Wc++11-narrowing</td><td style="text-align:left">type %0 cannot be narrowed to %1 in initializer list in C++11</td></tr><tr><td style="text-align:left">-Wc++11-narrowing</td><td style="text-align:left">non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</td></tr><tr><td style="text-align:left">-Wc++98-c++11-compat</td><td style="text-align:left">type definition in a constexpr %select{function&#124;constructor}0 is incompatible with C++ standards before C++1y</td></tr><tr><td style="text-align:left">-Wc++98-c++11-compat</td><td style="text-align:left">use of this statement in a constexpr %select{function&#124;constructor}0 is incompatible with C++ standards before C++1y</td></tr><tr><td style="text-align:left">-Wc++98-c++11-compat</td><td style="text-align:left">init-captures.def warn_cxx11_compat_init_capture : Warning “initialized lambda captures are incompatible with C++ standards “ “before C++1y</td></tr><tr><td style="text-align:left">-Wc++98-c++11-compat</td><td style="text-align:left">variable declaration in a constexpr %select{function&#124;constructor}0 is incompatible with C++ standards before C++1y</td></tr><tr><td style="text-align:left">-Wc++98-c++11-compat</td><td style="text-align:left">constexpr function with no return statements is incompatible with C++ standards before C++1y</td></tr><tr><td style="text-align:left">-Wc++98-c++11-compat</td><td style="text-align:left">multiple return statements in constexpr function is incompatible with C++ standards before C++1y</td></tr><tr><td style="text-align:left">-Wc++98-c++11-compat</td><td style="text-align:left">variable templates are incompatible with C++ standards before C++1y</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">substitution failure due to access control is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">%select{anonymous struct&#124;union}0 member %1 with a non-trivial %select{constructor&#124;copy constructor&#124;move constructor&#124;copy assignment operator&#124;move assignment operator&#124;destructor}2 is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">enumeration type in nested name specifier is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">static data member %0 in union is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">default template arguments for a function template are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">scalar initialized from empty initializer list is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">befriending %1 without ‘%select{struct&#124;interface&#124;union&#124;class&#124;enum}0’ keyword is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">use of null pointer as non-type template argument is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">friend declaration naming a member of the declaring class is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">non-class friend type %0 is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">befriending enumeration type %0 is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">use of non-static data member %0 in an unevaluated context is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">friend function %0 would be implicitly redefined in C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">%select{class template&#124;class template partial&#124;variable template&#124;variable template partial&#124;function template&#124;member function&#124;static data member&#124;member class&#124;member enumeration}0 specialization of %1 outside namespace %2 is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">reference initialized from initializer list is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">redundant parentheses surrounding address non-type template argument are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">initialization of initializer_list object is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">use of ‘template’ keyword outside of a template is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">non-type template argument referring to %select{function&#124;object}0 %1 with internal linkage is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">use of ‘typename’ outside of a template is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">passing object of trivial but non-POD type %0 through variadic %select{function&#124;block&#124;method&#124;constructor}1 is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">goto would jump into protected scope in C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">constructor call from initializer list is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">‘auto’ type specifier is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">delegating constructors are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">‘constexpr’ specifier is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">inheriting constructors are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">explicit conversion functions are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">switch case would be in a protected scope in C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">‘%0’ type specifier is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">indirect goto might cross protected scopes in C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat-pedantic</td><td style="text-align:left">cast between pointer-to-function and pointer-to-object is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat-pedantic</td><td style="text-align:left">implicit conversion from array size expression of type %0 to %select{integral&#124;enumeration}1 type %2 is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wcast-align</td><td style="text-align:left">cast from %0 to %1 increases required alignment from %2 to %3</td></tr><tr><td style="text-align:left">-Wcast-of-sel-type</td><td style="text-align:left">cast of type %0 to %1 is deprecated use sel_getName instead</td></tr><tr><td style="text-align:left">-Wchar-subscripts</td><td style="text-align:left">array subscript is of type ‘char’</td></tr><tr><td style="text-align:left">-Wconditional-uninitialized</td><td style="text-align:left">variable %0 may be uninitialized when %select{used here&#124;captured by block}1</td></tr><tr><td style="text-align:left">-Wconstant-logical-operand</td><td style="text-align:left">use of logical ‘%0’ with constant operand</td></tr><tr><td style="text-align:left">-Wconstexpr-not-const</td><td style="text-align:left">‘constexpr’ non-static member function will not be implicitly ‘const’ in C++1y add ‘const’ to avoid a change in behavior</td></tr><tr><td style="text-align:left">-Wconsumed</td><td style="text-align:left">state of variable ‘%0’ must match at the entry and exit of loop</td></tr><tr><td style="text-align:left">-Wconsumed</td><td style="text-align:left">parameter ‘%0’ not in expected state when the function returns: expected ‘%1’, observed ‘%2’</td></tr><tr><td style="text-align:left">-Wconsumed</td><td style="text-align:left">argument not in expected state expected ‘%0’, observed ‘%1’</td></tr><tr><td style="text-align:left">-Wconsumed</td><td style="text-align:left">invalid invocation of method ‘%0’ on a temporary object while it is in the ‘%1’ state</td></tr><tr><td style="text-align:left">-Wconsumed</td><td style="text-align:left">return state set for an unconsumable type ‘%0’</td></tr><tr><td style="text-align:left">-Wconsumed</td><td style="text-align:left">consumed analysis attribute is attached to member of class ‘%0’ which isn’t marked as consumable</td></tr><tr><td style="text-align:left">-Wconsumed</td><td style="text-align:left">invalid invocation of method ‘%0’ on object ‘%1’ while it is in the ‘%2’ state</td></tr><tr><td style="text-align:left">-Wconsumed</td><td style="text-align:left">return value not in expected state expected ‘%0’, observed ‘%1’</td></tr><tr><td style="text-align:left">-Wconversion</td><td style="text-align:left">implicit conversion discards imaginary component: %0 to %1</td></tr><tr><td style="text-align:left">-Wconversion</td><td style="text-align:left">non-type template argument with value ‘%0’ converted to ‘%1’ for unsigned template parameter of type %2</td></tr><tr><td style="text-align:left">-Wconversion</td><td style="text-align:left">implicit conversion loses floating-point precision: %0 to %1</td></tr><tr><td style="text-align:left">-Wconversion</td><td style="text-align:left">implicit conversion loses integer precision: %0 to %1</td></tr><tr><td style="text-align:left">-Wconversion</td><td style="text-align:left">non-type template argument value ‘%0’ truncated to ‘%1’ for template parameter of type %2</td></tr><tr><td style="text-align:left">-Wconversion</td><td style="text-align:left">implicit conversion turns vector to scalar: %0 to %1</td></tr><tr><td style="text-align:left">-Wconversion</td><td style="text-align:left">implicit conversion turns floating-point number into integer: %0 to %1</td></tr><tr><td style="text-align:left">-Wcovered-switch-default</td><td style="text-align:left">default label in switch which covers all enumeration values</td></tr><tr><td style="text-align:left">-Wcustom-atomic-properties</td><td style="text-align:left">atomic by default property %0 has a user defined %select{getter&#124;setter}1 (property should be marked ‘atomic’ if this is intended)</td></tr><tr><td style="text-align:left">-Wdangling-field</td><td style="text-align:left">initializing pointer member %0 with the stack address of parameter %1</td></tr><tr><td style="text-align:left">-Wdangling-field</td><td style="text-align:left">binding reference %select{&#124;subobject of }1member %0 to a temporary value</td></tr><tr><td style="text-align:left">-Wdangling-field</td><td style="text-align:left">binding reference member %0 to stack allocated parameter %1</td></tr><tr><td style="text-align:left">-Wdangling-initializer-list</td><td style="text-align:left">array backing the initializer list will be destroyed at the end of %select{the full-expression&#124;the constructor}0</td></tr><tr><td style="text-align:left">-Wdelete-incomplete</td><td style="text-align:left">deleting pointer to incomplete type %0 may cause undefined behavior</td></tr><tr><td style="text-align:left">-Wdelete-non-virtual-dtor</td><td style="text-align:left">delete called on %0 that is abstract but has non-virtual destructor</td></tr><tr><td style="text-align:left">-Wdelete-non-virtual-dtor</td><td style="text-align:left">delete called on %0 that has virtual functions but non-virtual destructor</td></tr><tr><td style="text-align:left">-Wdeprecated</td><td style="text-align:left">access declarations are deprecated use using declarations instead</td></tr><tr><td style="text-align:left">-Wdeprecated</td><td style="text-align:left">definition of implicit copy %select{constructor&#124;assignment operator}1 for %0 is deprecated because it has a user-declared %select{copy %select{assignment operator&#124;constructor}1&#124;destructor}2</td></tr><tr><td style="text-align:left">-Wdeprecated</td><td style="text-align:left">dynamic exception specifications are deprecated</td></tr><tr><td style="text-align:left">-Wdeprecated-increment-bool</td><td style="text-align:left">incrementing expression of type bool is deprecated</td></tr><tr><td style="text-align:left">-Wdeprecated-objc-isa-usage</td><td style="text-align:left">assignment to Objective-C’s isa is deprecated in favor of object_setClass()</td></tr><tr><td style="text-align:left">-Wdeprecated-objc-isa-usage</td><td style="text-align:left">direct access to Objective-C’s isa is deprecated in favor of object_getClass()</td></tr><tr><td style="text-align:left">-Wdeprecated-objc-pointer-introspection</td><td style="text-align:left">bitmasking for introspection of Objective-C object pointers is strongly discouraged</td></tr><tr><td style="text-align:left">-Wdeprecated-objc-pointer-introspection-performSelector</td><td style="text-align:left">warn_objc_pointer_masking.Text</td></tr><tr><td style="text-align:left">-Wdeprecated-writable-strings</td><td style="text-align:left">dummy warning to enable -fconst-strings</td></tr><tr><td style="text-align:left">-Wdirect-ivar-access</td><td style="text-align:left">instance variable %0 is being directly accessed</td></tr><tr><td style="text-align:left">-Wdistributed-object-modifiers</td><td style="text-align:left">conflicting distributed object modifiers on return type in implementation of %0</td></tr><tr><td style="text-align:left">-Wdistributed-object-modifiers</td><td style="text-align:left">conflicting distributed object modifiers on parameter type in implementation of %0</td></tr><tr><td style="text-align:left">-Wdivision-by-zero</td><td style="text-align:left">division by zero is undefined</td></tr><tr><td style="text-align:left">-Wdivision-by-zero</td><td style="text-align:left">remainder by zero is undefined</td></tr><tr><td style="text-align:left">-Wdocumentation</td><td style="text-align:left">parameter ‘%0’ not found in the function declaration</td></tr><tr><td style="text-align:left">-Wdocumentation</td><td style="text-align:left">not a Doxygen trailing comment</td></tr><tr><td style="text-align:left">-Wduplicate-enum</td><td style="text-align:left">element %0 has been implicitly assigned %1 which another element has been assigned</td></tr><tr><td style="text-align:left">-Wduplicate-method-match</td><td style="text-align:left">multiple declarations of method %0 found and ignored</td></tr><tr><td style="text-align:left">-Wdynamic-class-memaccess</td><td style="text-align:left">%select{destination for&#124;source of&#124;first operand of&#124;second operand of}0 this %1 call is a pointer to dynamic class %2 vtable pointer will be %select{overwritten&#124;copied&#124;moved&#124;compared}3</td></tr><tr><td style="text-align:left">-Wempty-body</td><td style="text-align:left">switch statement has empty body</td></tr><tr><td style="text-align:left">-Wempty-body</td><td style="text-align:left">for loop has empty body</td></tr><tr><td style="text-align:left">-Wempty-body</td><td style="text-align:left">if statement has empty body</td></tr><tr><td style="text-align:left">-Wempty-body</td><td style="text-align:left">range-based for loop has empty body</td></tr><tr><td style="text-align:left">-Wempty-body</td><td style="text-align:left">while loop has empty body</td></tr><tr><td style="text-align:left">-Wenum-compare</td><td style="text-align:left">comparison of two values with different enumeration types%  diff{ ($ and $)&#124;}0,1</td></tr><tr><td style="text-align:left">-Wenum-conversion</td><td style="text-align:left">implicit conversion from enumeration type %0 to different enumeration type %1</td></tr><tr><td style="text-align:left">-Wexit-time-destructors</td><td style="text-align:left">declaration requires an exit-time destructor</td></tr><tr><td style="text-align:left">-Wexplicit-ownership-type</td><td style="text-align:left">method parameter of type %0 with no explicit ownership</td></tr><tr><td style="text-align:left">-Wextern-c-compat</td><td style="text-align:left">%select{&#124;empty }0%select{struct&#124;union}1 has size 0 in C, %select{size 1&#124;non-zero size}2 in C++</td></tr><tr><td style="text-align:left">-Wextern-initializer</td><td style="text-align:left">‘extern’ variable has an initializer</td></tr><tr><td style="text-align:left">-Wfloat-equal</td><td style="text-align:left">comparing floating point with == or != is unsafe</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">“data argument position ‘%0’ exceeds the number of data arguments (%1)</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">position arguments in format strings start counting at 1 (not 0)</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">invalid position specified for %select{field width&#124;field precision}0</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">cannot mix positional and non-positional arguments in format string</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">values of type ‘%0’ should not be used as format arguments add an explicit cast to %1 instead</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">format specifies type %0 but the argument has type %1</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">zero field width in scanf format string is unused</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">no closing ‘]’ for ‘%%[‘ in scanf format string</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">format string should not be a wide string</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">format string contains ‘\0’ within the string body</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">‘%select{<em>&#124;.</em>}0’ specified field %select{width&#124;precision}0 is missing a matching ‘int’ argument</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">field %select{width&#124;precision}0 should have type %1, but argument has type %2</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">%select{field width&#124;precision}0 used with ‘%1’ conversion specifier, resulting in undefined behavior</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">format string missing</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">incomplete format specifier</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">flag ‘%0’ results in undefined behavior with ‘%1’ conversion specifier</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">flag ‘%0’ is ignored when flag ‘%1’ is present</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">more ‘%%’ conversions than data arguments</td></tr><tr><td style="text-align:left">-Wformat</td><td style="text-align:left">length modifier ‘%0’ results in undefined behavior or no effect with ‘%1’ conversion specifier</td></tr><tr><td style="text-align:left">-Wformat-extra-args</td><td style="text-align:left">data argument not used by format string</td></tr><tr><td style="text-align:left">-Wformat-invalid-specifier</td><td style="text-align:left">invalid conversion specifier ‘%0’</td></tr><tr><td style="text-align:left">-Wformat-nonliteral</td><td style="text-align:left">format string is not a string literal</td></tr><tr><td style="text-align:left">-Wformat-security</td><td style="text-align:left">format string is not a string literal (potentially insecure)</td></tr><tr><td style="text-align:left">-Wformat-zero-length</td><td style="text-align:left">format string is empty</td></tr><tr><td style="text-align:left">-Wgcc-compat</td><td style="text-align:left">GCC does not allow the ‘cleanup’ attribute argument to be anything other than a simple identifier</td></tr><tr><td style="text-align:left">-Wglobal-constructors</td><td style="text-align:left">declaration requires a global constructor</td></tr><tr><td style="text-align:left">-Wglobal-constructors</td><td style="text-align:left">declaration requires a global destructor</td></tr><tr><td style="text-align:left">-Wgnu-conditional-omitted-operand</td><td style="text-align:left">use of GNU ?: conditional expression extension, omitting middle operand</td></tr><tr><td style="text-align:left">-Wheader-hygiene</td><td style="text-align:left">using namespace directive in global context in header</td></tr><tr><td style="text-align:left">-Widiomatic-parentheses</td><td style="text-align:left">using the result of an assignment as a condition without parentheses</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">‘malloc’ attribute only applies to functions returning a pointer type</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%0 attribute only applies to %select{functions&#124;unions&#124;variables and functions&#124;functions and methods&#124;parameters&#124;functions, methods and blocks&#124;functions, methods, and classes&#124;functions, methods, and parameters&#124;classes&#124;variables&#124;methods&#124;variables, functions and labels&#124;fields and global variables&#124;structs&#124;variables, functions and tag types&#124;thread-local variables&#124;variables and fields&#124;variables, data members and tag types&#124;types and namespaces&#124;Objective-C interfaces}1</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">‘%0’ attribute cannot be specified on a definition</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">__weak attribute cannot be specified on an automatic variable when ARC is not enabled</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">Objective-C GC does not allow weak variables on the stack</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">__weak attribute cannot be specified on a field declaration</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">attribute %0 cannot be applied to %select{functions&#124;Objective-C method}1 without return value</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">attribute declaration must precede definition</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">attribute %0 is ignored, place it after \”%select{class&#124;struct&#124;union&#124;interface&#124;enum}1\” to apply attribute to type declaration</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">__declspec attribute %0 is not supported</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">attribute %0 ignored, because it cannot be applied to a type</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">attribute %0 after definition is ignored</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%0 attribute ignored</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">‘sentinel’ attribute only supported for variadic %select{functions&#124;blocks}0</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">‘sentinel’ attribute requires named arguments</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">‘%0’ only applies to %select{function&#124;pointer&#124;Objective-C object or block pointer}1 types type here is %2</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">‘nonnull’ attribute applied to function with no pointer arguments</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%0 attribute can only be applied to instance variables or properties</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">ibaction attribute can only be applied to Objective-C instance methods</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%0 calling convention ignored on variadic function</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%0 only applies to variables with static storage duration and functions</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%0 attribute argument not supported: %1</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">#pramga ms_struct can not be used with dynamic classes or structures</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">transparent union definition must contain at least one field transparent_union attribute ignored</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">first field of a transparent union cannot have %select{floating point&#124;vector}0 type %1 transparent_union attribute ignored</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">‘gnu_inline’ attribute requires function to be marked ‘inline’, attribute ignored</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">calling convention %0 ignored for this target</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">transparent_union attribute can only be applied to a union definition attribute ignored</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%select{alignment&#124;size}0 of field %1 (%2 bits) does not match the %select{alignment&#124;size}0 of the first field in transparent union transparent_union attribute ignored</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">attribute %0 is already applied</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%0 attribute ignored for field of type %1</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%0 attribute ignored when parsing type</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%0 attribute only applies to %select{functions&#124;methods&#124;properties}1 that return %select{an Objective-C object&#124;a pointer&#124;a non-retainable pointer}2</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">%0 attribute only applies to %select{Objective-C object&#124;pointer}1 parameters</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">attribute %0 is already applied with different parameters</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">unknown visibility %0</td></tr><tr><td style="text-align:left">-Wignored-qualifiers</td><td style="text-align:left">“‘%0’ type qualifier%s1 on return type %plural{1:has&#124;:have}1 no effect</td></tr><tr><td style="text-align:left">-Wignored-qualifiers</td><td style="text-align:left">ARC %select{unused&#124;<strong>unsafe_unretained&#124;</strong>strong&#124;<strong>weak&#124;</strong>autoreleasing}0 lifetime qualifier on return type is ignored</td></tr><tr><td style="text-align:left">-Wimplicit-atomic-properties</td><td style="text-align:left">property is assumed atomic by default</td></tr><tr><td style="text-align:left">-Wimplicit-atomic-properties</td><td style="text-align:left">property is assumed atomic when auto-synthesizing the property</td></tr><tr><td style="text-align:left">-Wimplicit-fallthrough</td><td style="text-align:left">fallthrough annotation in unreachable code</td></tr><tr><td style="text-align:left">-Wimplicit-fallthrough</td><td style="text-align:left">unannotated fall-through between switch labels</td></tr><tr><td style="text-align:left">-Wimplicit-fallthrough</td><td style="text-align:left">fallthrough annotation does not directly precede switch label</td></tr><tr><td style="text-align:left">-Wimplicit-function-declaration</td><td style="text-align:left">implicit declaration of function %0</td></tr><tr><td style="text-align:left">-Wimplicit-function-declaration</td><td style="text-align:left">use of unknown builtin %0</td></tr><tr><td style="text-align:left">-Wimplicit-retain-self</td><td style="text-align:left">“block implicitly retains ‘self’ explicitly mention ‘self’ to indicate this is intended behavior</td></tr><tr><td style="text-align:left">-Wincompatible-library-redeclaration</td><td style="text-align:left">incompatible redeclaration of library function %0</td></tr><tr><td style="text-align:left">-Wincomplete-implementation</td><td style="text-align:left">method definition for %0 not found</td></tr><tr><td style="text-align:left">-Winherited-variadic-ctor</td><td style="text-align:left">inheriting constructor does not inherit ellipsis</td></tr><tr><td style="text-align:left">-Winitializer-overrides</td><td style="text-align:left">subobject initialization overrides initialization of other fields within its enclosing subobject</td></tr><tr><td style="text-align:left">-Winitializer-overrides</td><td style="text-align:left">initializer overrides prior initialization of this subobject</td></tr><tr><td style="text-align:left">-Wint-to-pointer-cast</td><td style="text-align:left">cast to %1 from smaller integer type %0</td></tr><tr><td style="text-align:left">-Wint-to-void-pointer-cast</td><td style="text-align:left">cast to %1 from smaller integer type %0</td></tr><tr><td style="text-align:left">-Winvalid-iboutlet</td><td style="text-align:left">IBOutletCollection properties should be copy&#124;strong and not assign</td></tr><tr><td style="text-align:left">-Winvalid-iboutlet</td><td style="text-align:left">%select{instance variable&#124;property}2 with %0 attribute must be an object type (invalid %1)</td></tr><tr><td style="text-align:left">-Winvalid-noreturn</td><td style="text-align:left">function %0 declared ‘noreturn’ should not return</td></tr><tr><td style="text-align:left">-Winvalid-noreturn</td><td style="text-align:left">function declared ‘noreturn’ should not return</td></tr><tr><td style="text-align:left">-Wlarge-by-value-copy</td><td style="text-align:left">return value of %0 is a large (%1 bytes) pass-by-value object pass it by reference instead ?</td></tr><tr><td style="text-align:left">-Wlarge-by-value-copy</td><td style="text-align:left">%0 is a large (%1 bytes) pass-by-value argument pass it by reference instead ?</td></tr><tr><td style="text-align:left">-Wliteral-conversion</td><td style="text-align:left">implicit conversion from %0 to %1 changes value from %2 to %3</td></tr><tr><td style="text-align:left">-Wliteral-range</td><td style="text-align:left">magnitude of floating-point constant too large for type %0 maximum is %1</td></tr><tr><td style="text-align:left">-Wliteral-range</td><td style="text-align:left">magnitude of floating-point constant too small for type %0 minimum is %1</td></tr><tr><td style="text-align:left">-Wlogical-not-parentheses</td><td style="text-align:left">logical not is only applied to the left hand side of this comparison</td></tr><tr><td style="text-align:left">-Wlogical-op-parentheses</td><td style="text-align:left">‘&amp;&amp;’ within &#124;&#124;</td></tr><tr><td style="text-align:left">-Wloop-analysis</td><td style="text-align:left">variable%select{s&#124; %1&#124;s %1 and %2&#124;s %1, %2, and %3&#124;s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</td></tr><tr><td style="text-align:left">-Wloop-analysis</td><td style="text-align:left">variable %0 is %select{decremented&#124;incremented}1 both in the loop header and in the loop body</td></tr><tr><td style="text-align:left">-Wmethod-signatures</td><td style="text-align:left">conflicting parameter types in implementation of %0: %1 vs %2</td></tr><tr><td style="text-align:left">-Wmethod-signatures</td><td style="text-align:left">conflicting return type in implementation of %0: %1 vs %2</td></tr><tr><td style="text-align:left">-Wmicrosoft</td><td style="text-align:left">extra qualification on member %0</td></tr><tr><td style="text-align:left">-Wmismatched-method-attributes</td><td style="text-align:left">attributes on method implementation and its declaration must match</td></tr><tr><td style="text-align:left">-Wmismatched-parameter-types</td><td style="text-align:left">conflicting parameter types in implementation of %0<code>%diff</code>{: $ vs $&#124;}1,2</td></tr><tr><td style="text-align:left">-Wmismatched-return-types</td><td style="text-align:left">conflicting return type in implementation of %0%  diff{: $ vs $&#124;}1,2</td></tr><tr><td style="text-align:left">-Wmissing-braces</td><td style="text-align:left">suggest braces around initialization of subobject</td></tr><tr><td style="text-align:left">-Wmissing-declarations</td><td style="text-align:left">‘%0’ ignored on this declaration</td></tr><tr><td style="text-align:left">-Wmissing-field-initializers</td><td style="text-align:left">missing field ‘%0’ initializer</td></tr><tr><td style="text-align:left">-Wmissing-method-return-type</td><td style="text-align:left">method has no return type specified defaults to ‘id’</td></tr><tr><td style="text-align:left">-Wmissing-noreturn</td><td style="text-align:left">%select{function&#124;method}0 %1 could be declared with attribute ‘noreturn’</td></tr><tr><td style="text-align:left">-Wmissing-noreturn</td><td style="text-align:left">block could be declared with attribute ‘noreturn’</td></tr><tr><td style="text-align:left">-Wmissing-prototypes</td><td style="text-align:left">no previous prototype for function %0</td></tr><tr><td style="text-align:left">-Wmissing-variable-declarations</td><td style="text-align:left">no previous extern declaration for non-static variable %0</td></tr><tr><td style="text-align:left">-Wmultiple-move-vbase</td><td style="text-align:left">defaulted move assignment operator of %0 will move assign virtual base class %1 multiple times</td></tr><tr><td style="text-align:left">-Wnested-anon-types</td><td style="text-align:left">anonymous types declared in an anonymous union&#124;struct are an extension</td></tr><tr><td style="text-align:left">-Wno-typedef-redefinition</td><td style="text-align:left">Redefinition of typedef ‘%0’ is a C11 feature</td></tr><tr><td style="text-align:left">-Wnon-literal-null-conversion</td><td style="text-align:left">“expression which evaluates to zero treated as a null pointer constant of “ “type %0</td></tr><tr><td style="text-align:left">-Wnon-pod-varargs</td><td style="text-align:left">second argument to ‘va_arg’ is of ARC ownership-qualified type %0</td></tr><tr><td style="text-align:left">-Wnon-pod-varargs</td><td style="text-align:left">cannot pass %select{non-POD&#124;non-trivial}0 object of type %1 to variadic %select{function&#124;block&#124;method&#124;constructor}2 expected type from format string was %3</td></tr><tr><td style="text-align:left">-Wnon-pod-varargs</td><td style="text-align:left">second argument to ‘va_arg’ is of non-POD type %0</td></tr><tr><td style="text-align:left">-Wnon-pod-varargs</td><td style="text-align:left">cannot pass object of %select{non-POD&#124;non-trivial}0 type %1 through variadic %select{function&#124;block&#124;method&#124;constructor}2 call will abort at runtime</td></tr><tr><td style="text-align:left">-Wnon-virtual-dtor</td><td style="text-align:left">%0 has virtual functions but non-virtual destructor</td></tr><tr><td style="text-align:left">-Wnonnull</td><td style="text-align:left">null passed to a callee which requires a non-null argument</td></tr><tr><td style="text-align:left">-Wnull-arithmetic</td><td style="text-align:left">use of NULL in arithmetic operation</td></tr><tr><td style="text-align:left">-Wnull-arithmetic</td><td style="text-align:left">comparison between NULL and non-pointer %select{(%1 and NULL)&#124;(NULL and %1)}0</td></tr><tr><td style="text-align:left">-Wnull-dereference</td><td style="text-align:left">indirection of non-volatile null pointer will be deleted, not trap</td></tr><tr><td style="text-align:left">-Wobjc-autosynthesis-property-ivar-name-match</td><td style="text-align:left">autosynthesized property %0 will use %select{&#124;synthesized}1 instance variable %2, not existing instance variable %3</td></tr><tr><td style="text-align:left">-Wobjc-forward-class-redefinition</td><td style="text-align:left">redefinition of forward class %0 of a typedef name of an object type is ignored</td></tr><tr><td style="text-align:left">-Wobjc-interface-ivars</td><td style="text-align:left">declaration of instance variables in the interface is deprecated</td></tr><tr><td style="text-align:left">-Wobjc-literal-compare</td><td style="text-align:left">direct comparison of %select{an array literal&#124;a dictionary literal&#124;a numeric literal&#124;a boxed expression&#124;}0 has undefined behavior</td></tr><tr><td style="text-align:left">-Wobjc-literal-missing-atsign</td><td style="text-align:left">string literal must be prefixed by ‘@’</td></tr><tr><td style="text-align:left">-Wobjc-method-access</td><td style="text-align:left">instance method %objcinstance0 not found (return type defaults to ‘id’) did you mean %objcinstance2?</td></tr><tr><td style="text-align:left">-Wobjc-method-access</td><td style="text-align:left">class method %objcclass0 not found (return type defaults to ‘id’) did you mean %objcclass2?</td></tr><tr><td style="text-align:left">-Wobjc-method-access</td><td style="text-align:left">instance method %objcinstance0 not found (return type defaults to ‘id’)</td></tr><tr><td style="text-align:left">-Wobjc-method-access</td><td style="text-align:left">instance method %0 is being used on ‘Class’ which is not in the root class</td></tr><tr><td style="text-align:left">-Wobjc-method-access</td><td style="text-align:left">class method %objcclass0 not found (return type defaults to ‘id’)</td></tr><tr><td style="text-align:left">-Wobjc-method-access</td><td style="text-align:left">instance method %0 found instead of class method %1</td></tr><tr><td style="text-align:left">-Wobjc-missing-property-synthesis</td><td style="text-align:left">“auto property synthesis is synthesizing property not explicitly synthesized</td></tr><tr><td style="text-align:left">-Wobjc-missing-super-calls</td><td style="text-align:left">method possibly missing a [super %0] call</td></tr><tr><td style="text-align:left">-Wobjc-noncopy-retain-block-property</td><td style="text-align:left">“retain’ed block property does not copy the block “ “- use copy attribute instead</td></tr><tr><td style="text-align:left">-Wobjc-nonunified-exceptions</td><td style="text-align:left">can not catch an exception thrown with @throw in C++ in the non-unified exception model</td></tr><tr><td style="text-align:left">-Wobjc-property-implementation</td><td style="text-align:left">property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category</td></tr><tr><td style="text-align:left">-Wobjc-property-implementation</td><td style="text-align:left">property %0 requires method %1 to be defined - use @synthesize, @dynamic or provide a method implementation in this class implementation</td></tr><tr><td style="text-align:left">-Wobjc-property-implicit-mismatch</td><td style="text-align:left">“primary property declaration is implicitly strong while redeclaration in class extension is weak</td></tr><tr><td style="text-align:left">-Wobjc-property-matches-cocoa-ownership-rule</td><td style="text-align:left">property’s synthesized getter follows Cocoa naming convention for returning ‘owned’ objects</td></tr><tr><td style="text-align:left">-Wobjc-property-no-attribute</td><td style="text-align:left">no ‘assign’, ‘retain’, or ‘copy’ attribute is specified - ‘assign’ is assumed</td></tr><tr><td style="text-align:left">-Wobjc-property-no-attribute</td><td style="text-align:left">default property attribute ‘assign’ not appropriate for non-GC object</td></tr><tr><td style="text-align:left">-Wobjc-property-synthesis</td><td style="text-align:left">auto property synthesis will not synthesize property ‘%0’ because it is ‘readwrite’ but it will be synthesized ‘readonly’ via another property</td></tr><tr><td style="text-align:left">-Wobjc-property-synthesis</td><td style="text-align:left">“auto property synthesis will not synthesize property ‘%0’ because it cannot share an ivar with another synthesized property</td></tr><tr><td style="text-align:left">-Wobjc-protocol-method-implementation</td><td style="text-align:left">category is implementing a method which will also be implemented by its primary class</td></tr><tr><td style="text-align:left">-Wobjc-protocol-property-synthesis</td><td style="text-align:left">auto property synthesis will not synthesize property declared in a protocol</td></tr><tr><td style="text-align:left">-Wobjc-redundant-literal-use</td><td style="text-align:left">using %0 with a literal is redundant</td></tr><tr><td style="text-align:left">-Wobjc-root-class</td><td style="text-align:left">class %0 defined without specifying a base class</td></tr><tr><td style="text-align:left">-Wobjc-string-compare</td><td style="text-align:left">direct comparison of a string literal has undefined behavior</td></tr><tr><td style="text-align:left">-Wobjc-string-concatenation</td><td style="text-align:left">concatenated NSString literal for an NSArray expression - possibly missing a comma</td></tr><tr><td style="text-align:left">-Wover-aligned</td><td style="text-align:left">type %0 requires %1 bytes of alignment and the default allocator only guarantees %2 bytes</td></tr><tr><td style="text-align:left">-Woverloaded-shift-op-parentheses</td><td style="text-align:left">overloaded operator %select{&#124;}0 has lower precedence than comparison operator</td></tr><tr><td style="text-align:left">-Woverloaded-virtual</td><td style="text-align:left">%q0 hides overloaded virtual %select{function&#124;functions}1</td></tr><tr><td style="text-align:left">-Woverriding-method-mismatch</td><td style="text-align:left">conflicting distributed object modifiers on parameter type in declaration of %0</td></tr><tr><td style="text-align:left">-Woverriding-method-mismatch</td><td style="text-align:left">conflicting parameter types in declaration of %0: %1 vs %2</td></tr><tr><td style="text-align:left">-Woverriding-method-mismatch</td><td style="text-align:left">conflicting variadic declaration of method and its implementation</td></tr><tr><td style="text-align:left">-Woverriding-method-mismatch</td><td style="text-align:left">conflicting distributed object modifiers on return type in declaration of %0</td></tr><tr><td style="text-align:left">-Woverriding-method-mismatch</td><td style="text-align:left">conflicting parameter types in declaration of %0<code>%diff</code>{: $ vs $&#124;}1,2</td></tr><tr><td style="text-align:left">-Woverriding-method-mismatch</td><td style="text-align:left">conflicting return type in declaration of %0<code>%diff</code>{: $ vs $&#124;}1,2</td></tr><tr><td style="text-align:left">-Woverriding-method-mismatch</td><td style="text-align:left">conflicting return type in declaration of %0: %1 vs %2</td></tr><tr><td style="text-align:left">-Wpacked</td><td style="text-align:left">packed attribute is unnecessary for %0</td></tr><tr><td style="text-align:left">-Wpadded</td><td style="text-align:left">padding %select{struct&#124;interface&#124;class}0 %1 with %2 %select{byte&#124;bit}3%select{&#124;s}4 to align anonymous bit-field</td></tr><tr><td style="text-align:left">-Wpadded</td><td style="text-align:left">padding %select{struct&#124;interface&#124;class}0 %1 with %2 %select{byte&#124;bit}3%select{&#124;s}4 to align %5</td></tr><tr><td style="text-align:left">-Wpadded</td><td style="text-align:left">padding size of %0 with %1 %select{byte&#124;bit}2%select{&#124;s}3 to alignment boundary</td></tr><tr><td style="text-align:left">-Wparentheses</td><td style="text-align:left">using the result of an assignment as a condition without parentheses</td></tr><tr><td style="text-align:left">-Wparentheses</td><td style="text-align:left">%0 has lower precedence than %1 %1 will be evaluated first</td></tr><tr><td style="text-align:left">-Wparentheses</td><td style="text-align:left">operator ‘?:’ has lower precedence than ‘%0’ ‘%0’ will be evaluated first</td></tr><tr><td style="text-align:left">-Wparentheses-equality</td><td style="text-align:left">equality comparison with extraneous parentheses</td></tr><tr><td style="text-align:left">-Wpointer-arith</td><td style="text-align:left">subtraction of pointers to type %0 of zero size has undefined behavior</td></tr><tr><td style="text-align:left">-Wpredefined-identifier-outside-function</td><td style="text-align:left">predefined identifier is only valid inside function</td></tr><tr><td style="text-align:left">-Wprivate-extern</td><td style="text-align:left">use of <strong>private_extern</strong> on a declaration may not produce external symbol private to the linkage unit and is deprecated</td></tr><tr><td style="text-align:left">-Wprotocol</td><td style="text-align:left">method %0 in protocol not implemented</td></tr><tr><td style="text-align:left">-Wprotocol-property-synthesis-ambiguity</td><td style="text-align:left">property of type %0 was selected for synthesis</td></tr><tr><td style="text-align:left">-Wreadonly-iboutlet-property</td><td style="text-align:left">readonly IBOutlet property ‘%0’ when auto-synthesized may not work correctly with ‘nib’ loader</td></tr><tr><td style="text-align:left">-Wreadonly-setter-attrs</td><td style="text-align:left">property attributes ‘%0’ and ‘%1’ are mutually exclusive</td></tr><tr><td style="text-align:left">-Wreceiver-expr</td><td style="text-align:left">receiver type %0 is not ‘id’ or interface pointer, consider casting it to ‘id’</td></tr><tr><td style="text-align:left">-Wreceiver-forward-class</td><td style="text-align:left">receiver type %0 for instance message is a forward declaration</td></tr><tr><td style="text-align:left">-Wreceiver-is-weak</td><td style="text-align:left">“weak %select{receiver&#124;property&#124;implicit property}0 may be unpredictably set to nil</td></tr><tr><td style="text-align:left">-Wreinterpret-base-class</td><td style="text-align:left">‘reinterpret_cast’ %select{from&#124;to}3 class %0 %select{to&#124;from}3 its %select{virtual base&#124;base at non-zero offset}2 %1 behaves differently from ‘static_cast’</td></tr><tr><td style="text-align:left">-Wreorder</td><td style="text-align:left">%select{field&#124;base class}0 %1 will be initialized after %select{field&#124;base}2 %3</td></tr><tr><td style="text-align:left">-Wrequires-super-attribute</td><td style="text-align:left">%0 attribute cannot be applied to %select{methods in protocols&#124;dealloc}1</td></tr><tr><td style="text-align:left">-Wreturn-stack-address</td><td style="text-align:left">returning address of local temporary object</td></tr><tr><td style="text-align:left">-Wreturn-stack-address</td><td style="text-align:left">returning address of label, which is local</td></tr><tr><td style="text-align:left">-Wreturn-stack-address</td><td style="text-align:left">address of stack memory associated with local variable %0 returned</td></tr><tr><td style="text-align:left">-Wreturn-stack-address</td><td style="text-align:left">reference to stack memory associated with local variable %0 returned</td></tr><tr><td style="text-align:left">-Wreturn-stack-address</td><td style="text-align:left">returning reference to local temporary object</td></tr><tr><td style="text-align:left">-Wreturn-type</td><td style="text-align:left">control may reach end of non-void function</td></tr><tr><td style="text-align:left">-Wreturn-type</td><td style="text-align:left">non-void %select{function&#124;method}1 %0 should return a value, DefaultError</td></tr><tr><td style="text-align:left">-Wreturn-type</td><td style="text-align:left">control reaches end of non-void function</td></tr><tr><td style="text-align:left">-Wreturn-type-c-linkage</td><td style="text-align:left">%0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</td></tr><tr><td style="text-align:left">-Wreturn-type-c-linkage</td><td style="text-align:left">%0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</td></tr><tr><td style="text-align:left">-Wsection</td><td style="text-align:left">section does not match previous declaration</td></tr><tr><td style="text-align:left">-Wselector</td><td style="text-align:left">creating selector for nonexistent method %0</td></tr><tr><td style="text-align:left">-Wselector-type-mismatch</td><td style="text-align:left">multiple selectors named %0 found</td></tr><tr><td style="text-align:left">-Wself-assign</td><td style="text-align:left">explicitly assigning a variable of type %0 to itself</td></tr><tr><td style="text-align:left">-Wself-assign-field</td><td style="text-align:left">assigning %select{field&#124;instance variable}0 to itself</td></tr><tr><td style="text-align:left">-Wsentinel</td><td style="text-align:left">“missing sentinel in %select{function call&#124;method dispatch&#124;block call}0</td></tr><tr><td style="text-align:left">-Wsentinel</td><td style="text-align:left">not enough variable arguments in %0 declaration to fit a sentinel</td></tr><tr><td style="text-align:left">-Wshadow</td><td style="text-align:left">declaration shadows a %select{“ “local variable&#124;” “variable in %2&#124;” “static data member of %2&#124;” “field of %2}1</td></tr><tr><td style="text-align:left">-Wshadow-ivar</td><td style="text-align:left">local declaration of %0 hides instance variable</td></tr><tr><td style="text-align:left">-Wshift-count-negative</td><td style="text-align:left">shift count is negative</td></tr><tr><td style="text-align:left">-Wshift-count-overflow</td><td style="text-align:left">shift count = width of type</td></tr><tr><td style="text-align:left">-Wshift-op-parentheses</td><td style="text-align:left">operator ‘%0’ has lower precedence than ‘%1’ ‘%1’ will be evaluated first</td></tr><tr><td style="text-align:left">-Wshift-overflow</td><td style="text-align:left">signed shift result (%0) requires %1 bits to represent, but %2 only has %3 bits</td></tr><tr><td style="text-align:left">-Wshift-sign-overflow</td><td style="text-align:left">signed shift result (%0) sets the sign bit of the shift expression’s type (%1) and becomes negative</td></tr><tr><td style="text-align:left">-Wshorten-64-to-32</td><td style="text-align:left">implicit conversion loses integer precision: %0 to %1</td></tr><tr><td style="text-align:left">-Wsign-compare</td><td style="text-align:left">comparison of integers of different signs: %0 and %1</td></tr><tr><td style="text-align:left">-Wsign-conversion</td><td style="text-align:left">implicit conversion changes signedness: %0 to %1</td></tr><tr><td style="text-align:left">-Wsign-conversion</td><td style="text-align:left">operand of ? changes signedness: %0 to %1</td></tr><tr><td style="text-align:left">-Wsizeof-array-argument</td><td style="text-align:left">sizeof on array function parameter will return size of %0 instead of %1</td></tr><tr><td style="text-align:left">-Wsizeof-array-decay</td><td style="text-align:left">sizeof on pointer operation will return size of %0 instead of %1</td></tr><tr><td style="text-align:left">-Wsizeof-pointer-memaccess</td><td style="text-align:left">‘%0’ call operates on objects of type %1 while the size is based on a “ “different type %2</td></tr><tr><td style="text-align:left">-Wsizeof-pointer-memaccess</td><td style="text-align:left">argument to ‘sizeof’ in %0 call is the same pointer type %1 as the %select{destination&#124;source}2 expected %3 or an explicit length</td></tr><tr><td style="text-align:left">-Wsometimes-uninitialized</td><td style="text-align:left">variable %0 is %select{used&#124;captured}1 uninitialized whenever %select{‘%3’ condition is %select{true&#124;false}4&#124;’%3’ loop %select{is entered&#124;exits because its condition is false}4&#124;’%3’ loop %select{condition is true&#124;exits because its condition is false}4&#124;switch %3 is taken&#124;its declaration is reached&#124;%3 is called}2</td></tr><tr><td style="text-align:left">-Wstatic-local-in-inline</td><td style="text-align:left">non-constant static local variable in inline function may be different in different files</td></tr><tr><td style="text-align:left">-Wstatic-self-init</td><td style="text-align:left">static variable %0 is suspiciously used within its own initialization</td></tr><tr><td style="text-align:left">-Wstrict-selector-match</td><td style="text-align:left">multiple methods named %0 found</td></tr><tr><td style="text-align:left">-Wstring-compare</td><td style="text-align:left">result of comparison against %select{a string literal&#124;@encode}0 is unspecified (use strncmp instead)</td></tr><tr><td style="text-align:left">-Wstring-conversion</td><td style="text-align:left">implicit conversion turns string literal into bool: %0 to %1</td></tr><tr><td style="text-align:left">-Wstring-plus-char</td><td style="text-align:left">adding %0 to a string pointer does not append to the string</td></tr><tr><td style="text-align:left">-Wstring-plus-int</td><td style="text-align:left">adding %0 to a string does not append to the string</td></tr><tr><td style="text-align:left">-Wstrlcpy-strlcat-size</td><td style="text-align:left">size argument in %0 call appears to be size of the source expected the size of the destination</td></tr><tr><td style="text-align:left">-Wstrncat-size</td><td style="text-align:left">the value of the size argument in ‘strncat’ is too large, might lead to a “ “buffer overflow</td></tr><tr><td style="text-align:left">-Wstrncat-size</td><td style="text-align:left">size argument in ‘strncat’ call appears “ “to be size of the source</td></tr><tr><td style="text-align:left">-Wstrncat-size</td><td style="text-align:left">the value of the size argument to ‘strncat’ is wrong</td></tr><tr><td style="text-align:left">-Wsuper-class-method-mismatch</td><td style="text-align:left">method parameter type <code>%diff</code>{$ does not match super class method parameter type $&#124;does not match super class method parameter type}0,1</td></tr><tr><td style="text-align:left">-Wswitch</td><td style="text-align:left">overflow converting case value to switch condition type (%0 to %1)</td></tr><tr><td style="text-align:left">-Wswitch</td><td style="text-align:left">case value not in enumerated type %0</td></tr><tr><td style="text-align:left">-Wswitch</td><td style="text-align:left">%0 enumeration values not handled in switch: %1, %2, %3…</td></tr><tr><td style="text-align:left">-Wswitch</td><td style="text-align:left">enumeration values %0 and %1 not handled in switch</td></tr><tr><td style="text-align:left">-Wswitch</td><td style="text-align:left">enumeration value %0 not handled in switch</td></tr><tr><td style="text-align:left">-Wswitch</td><td style="text-align:left">enumeration values %0, %1, and %2 not handled in switch</td></tr><tr><td style="text-align:left">-Wswitch-enum</td><td style="text-align:left">enumeration values %0, %1, and %2 not explicitly handled in switch</td></tr><tr><td style="text-align:left">-Wswitch-enum</td><td style="text-align:left">enumeration values %0 and %1 not explicitly handled in switch</td></tr><tr><td style="text-align:left">-Wswitch-enum</td><td style="text-align:left">%0 enumeration values not explicitly handled in switch: %1, %2, %3…</td></tr><tr><td style="text-align:left">-Wswitch-enum</td><td style="text-align:left">enumeration value %0 not explicitly handled in switch</td></tr><tr><td style="text-align:left">-Wtautological-compare</td><td style="text-align:left">comparison of %0 unsigned%select{&#124; enum}2 expression is always %1</td></tr><tr><td style="text-align:left">-Wtautological-compare</td><td style="text-align:left">%select{self-&#124;array }0comparison always evaluates to %select{false&#124;true&#124;a constant}1</td></tr><tr><td style="text-align:left">-Wtautological-compare</td><td style="text-align:left">comparison of unsigned%select{&#124; enum}2 expression %0 is always %1</td></tr><tr><td style="text-align:left">-Wtautological-constant-out-of-range-compare</td><td style="text-align:left">comparison of constant %0 with expression of type %1 is always %select{false&#124;true}2</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">locking ‘%0’ that is already locked</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">cannot call function ‘%0’ while mutex ‘%1’ is locked</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">%select{reading&#124;writing}2 the value pointed to by ‘%0’ requires locking %select{‘%1’&#124;’%1’ exclusively}2</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">unlocking ‘%0’ that was not locked</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">mutex ‘%0’ is locked exclusively and shared in the same scope</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">calling function ‘%0’ requires %select{shared&#124;exclusive}2 lock on ‘%1’</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">%select{reading&#124;writing}2 variable ‘%0’ requires locking %select{‘%1’&#124;’%1’ exclusively}2</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">cannot resolve lock expression</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">expecting mutex ‘%0’ to be locked at the end of function</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">mutex ‘%0’ is not locked on every path through here</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">%select{reading&#124;writing}1 the value pointed to by ‘%0’ requires locking %select{any mutex&#124;any mutex exclusively}1</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">%select{reading&#124;writing}1 variable ‘%0’ requires locking %select{any mutex&#124;any mutex exclusively}1</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">mutex ‘%0’ is still locked at the end of function</td></tr><tr><td style="text-align:left">-Wthread-safety-analysis</td><td style="text-align:left">expecting mutex ‘%0’ to be locked at start of each loop</td></tr><tr><td style="text-align:left">-Wthread-safety-attributes</td><td style="text-align:left">ignoring %0 attribute because its argument is invalid</td></tr><tr><td style="text-align:left">-Wthread-safety-attributes</td><td style="text-align:left">%0 attribute only applies to %select{fields and global variables&#124;functions and methods&#124;classes and structs}1</td></tr><tr><td style="text-align:left">-Wthread-safety-attributes</td><td style="text-align:left">%0 attribute requires arguments that are class type or point to class type type here is ‘%1’</td></tr><tr><td style="text-align:left">-Wthread-safety-attributes</td><td style="text-align:left">%0 attribute can only be applied in a context annotated with ‘lockable’ attribute</td></tr><tr><td style="text-align:left">-Wthread-safety-attributes</td><td style="text-align:left">%0 attribute requires arguments whose type is annotated with ‘lockable’ attribute type here is ‘%1’</td></tr><tr><td style="text-align:left">-Wthread-safety-attributes</td><td style="text-align:left">‘%0’ only applies to pointer types type here is %1</td></tr><tr><td style="text-align:left">-Wthread-safety-beta</td><td style="text-align:left">Thread safety beta warning.</td></tr><tr><td style="text-align:left">-Wthread-safety-precise</td><td style="text-align:left">%select{reading&#124;writing}2 the value pointed to by ‘%0’ requires locking %select{‘%1’&#124;’%1’ exclusively}2</td></tr><tr><td style="text-align:left">-Wthread-safety-precise</td><td style="text-align:left">%select{reading&#124;writing}2 variable ‘%0’ requires locking %select{‘%1’&#124;’%1’ exclusively}2</td></tr><tr><td style="text-align:left">-Wthread-safety-precise</td><td style="text-align:left">calling function ‘%0’ requires %select{shared&#124;exclusive}2 lock on ‘%1’</td></tr><tr><td style="text-align:left">-Wtype-safety</td><td style="text-align:left">this type tag was not designed to be used with this function</td></tr><tr><td style="text-align:left">-Wtype-safety</td><td style="text-align:left">specified %0 type tag requires a null pointer</td></tr><tr><td style="text-align:left">-Wtype-safety</td><td style="text-align:left">argument type %0 doesn’t match specified ‘%1’ type tag %select{that requires %3&#124;}2</td></tr><tr><td style="text-align:left">-Wundeclared-selector</td><td style="text-align:left">undeclared selector %0 did you mean %1?</td></tr><tr><td style="text-align:left">-Wundeclared-selector</td><td style="text-align:left">undeclared selector %0</td></tr><tr><td style="text-align:left">-Wundefined-inline</td><td style="text-align:left">inline function %q0 is not defined</td></tr><tr><td style="text-align:left">-Wundefined-internal</td><td style="text-align:left">%select{function&#124;variable}0 %q1 has internal linkage but is not defined</td></tr><tr><td style="text-align:left">-Wundefined-reinterpret-cast</td><td style="text-align:left">dereference of type %1 that was reinterpret_cast from type %0 has undefined behavior</td></tr><tr><td style="text-align:left">-Wundefined-reinterpret-cast</td><td style="text-align:left">reinterpret_cast from %0 to %1 has undefined behavior</td></tr><tr><td style="text-align:left">-Wuninitialized</td><td style="text-align:left">reference %0 is not yet bound to a value when used within its own initialization</td></tr><tr><td style="text-align:left">-Wuninitialized</td><td style="text-align:left">field %0 is uninitialized when used here</td></tr><tr><td style="text-align:left">-Wuninitialized</td><td style="text-align:left">block pointer variable %0 is uninitialized when captured by block</td></tr><tr><td style="text-align:left">-Wuninitialized</td><td style="text-align:left">variable %0 is uninitialized when used within its own initialization</td></tr><tr><td style="text-align:left">-Wuninitialized</td><td style="text-align:left">variable %0 is uninitialized when %select{used here&#124;captured by block}1</td></tr><tr><td style="text-align:left">-Wuninitialized</td><td style="text-align:left">reference %0 is not yet bound to a value when used here</td></tr><tr><td style="text-align:left">-Wunneeded-internal-declaration</td><td style="text-align:left">%select{function&#124;variable}0 %1 is not needed and will not be emitted</td></tr><tr><td style="text-align:left">-Wunneeded-internal-declaration</td><td style="text-align:left">‘static’ function %0 declared in header file should be declared ‘static inline’</td></tr><tr><td style="text-align:left">-Wunneeded-member-function</td><td style="text-align:left">member function %0 is not needed and will not be emitted</td></tr><tr><td style="text-align:left">-Wunreachable-code</td><td style="text-align:left">will never be executed</td></tr><tr><td style="text-align:left">-Wunsequenced</td><td style="text-align:left">multiple unsequenced modifications to %0</td></tr><tr><td style="text-align:left">-Wunsequenced</td><td style="text-align:left">unsequenced modification and access to %0</td></tr><tr><td style="text-align:left">-Wunsupported-friend</td><td style="text-align:left">dependent nested name specifier ‘%0’ for friend template declaration is not supported ignoring this friend declaration</td></tr><tr><td style="text-align:left">-Wunsupported-friend</td><td style="text-align:left">dependent nested name specifier ‘%0’ for friend class declaration is not supported turning off access control for %1</td></tr><tr><td style="text-align:left">-Wunsupported-visibility</td><td style="text-align:left">target does not support ‘protected’ visibility using ‘default’</td></tr><tr><td style="text-align:left">-Wunused-comparison</td><td style="text-align:left">%select{equality&#124;inequality}0 comparison result unused</td></tr><tr><td style="text-align:left">-Wunused-const-variable</td><td style="text-align:left">unused variable %0</td></tr><tr><td style="text-align:left">-Wunused-exception-parameter</td><td style="text-align:left">unused exception parameter %0</td></tr><tr><td style="text-align:left">-Wunused-function</td><td style="text-align:left">unused function %0</td></tr><tr><td style="text-align:left">-Wunused-label</td><td style="text-align:left">unused label %0</td></tr><tr><td style="text-align:left">-Wunused-member-function</td><td style="text-align:left">unused member function %0</td></tr><tr><td style="text-align:left">-Wunused-parameter</td><td style="text-align:left">unused parameter %0</td></tr><tr><td style="text-align:left">-Wunused-private-field</td><td style="text-align:left">private field %0 is not used</td></tr><tr><td style="text-align:left">-Wunused-property-ivar</td><td style="text-align:left">ivar %0 which backs the property is not referenced in this property’s accessor</td></tr><tr><td style="text-align:left">-Wunused-result</td><td style="text-align:left">ignoring return value of function declared with warn_unused_result attribute</td></tr><tr><td style="text-align:left">-Wunused-value</td><td style="text-align:left">ignoring return value of function declared with %0 attribute</td></tr><tr><td style="text-align:left">-Wunused-value</td><td style="text-align:left">expression result unused should this cast be to ‘void’?</td></tr><tr><td style="text-align:left">-Wunused-value</td><td style="text-align:left">expression result unused</td></tr><tr><td style="text-align:left">-Wunused-variable</td><td style="text-align:left">unused variable %0</td></tr><tr><td style="text-align:left">-Wunused-volatile-lvalue</td><td style="text-align:left">expression result unused assign into a variable to force a volatile load</td></tr><tr><td style="text-align:left">-Wused-but-marked-unused</td><td style="text-align:left">%0 was marked unused but was used</td></tr><tr><td style="text-align:left">-Wuser-defined-literals</td><td style="text-align:left">user-defined literal suffixes not starting with ‘_’ are reserved%select{ no literal will invoke this operator&#124;}0</td></tr><tr><td style="text-align:left">-Wvarargs</td><td style="text-align:left">second parameter of ‘va_start’ not last named argument</td></tr><tr><td style="text-align:left">-Wvarargs</td><td style="text-align:left">‘va_start’ has undefined behavior with reference types</td></tr><tr><td style="text-align:left">-Wvarargs</td><td style="text-align:left">second argument to ‘va_arg’ is of promotable type %0 this va_arg has undefined behavior because arguments will be promoted to %1</td></tr><tr><td style="text-align:left">-Wvector-conversion</td><td style="text-align:left">incompatible vector types %select{<code>%diff</code>{assigning to $ from $&#124;assigning to different types}0,1&#124;<code>%diff</code>{passing $ to parameter of type $&#124;passing to parameter of different type}0,1&#124;<code>%diff</code>{returning $ from a function with result type $&#124;returning from function with different return type}0,1&#124;%  diff{converting $ to type $&#124;converting between types}0,1&#124;<code>%diff</code>{initializing $ with an expression of type $&#124;initializing with expression of different type}0,1&#124;<code>%diff</code>{sending $ to parameter of type $&#124;sending to parameter of different type}0,1&#124;<code>%diff</code>{casting $ to type $&#124;casting between types}0,1}2</td></tr><tr><td style="text-align:left">-Wvexing-parse</td><td style="text-align:left">parentheses were disambiguated as a function declaration</td></tr><tr><td style="text-align:left">-Wvexing-parse</td><td style="text-align:left">empty parentheses interpreted as a function declaration</td></tr><tr><td style="text-align:left">-Wvisibility</td><td style="text-align:left">declaration of %0 will not be visible outside of this function</td></tr><tr><td style="text-align:left">-Wvisibility</td><td style="text-align:left">redefinition of %0 will not be visible outside of this function</td></tr><tr><td style="text-align:left">-Wvla</td><td style="text-align:left">variable length array used</td></tr><tr><td style="text-align:left">-Wvla-extension</td><td style="text-align:left">variable length arrays are a C99 feature</td></tr><tr><td style="text-align:left">-Wweak-template-vtables</td><td style="text-align:left">explicit template instantiation %0 will emit a vtable in every translation unit</td></tr><tr><td style="text-align:left">-Wweak-vtables</td><td style="text-align:left">%0 has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit</td></tr></tbody></table><h2 id="Lexer-Warnings-词法分析警告"><a href="#Lexer-Warnings-词法分析警告" class="headerlink" title="Lexer Warnings(词法分析警告)"></a>Lexer Warnings(词法分析警告)</h2><table><thead><tr><th style="text-align:left"><style> table th:first-of-type { width: 20%; } </style>Warning</th><th style="text-align:left"><style> table th:nth-of-type(2) { width: 80%; } </style>Message </th></tr></thead><tbody><tr><td style="text-align:left">-W#pragma-messages</td><td style="text-align:left">%0</td></tr><tr><td style="text-align:left">-W#warnings</td><td style="text-align:left">%0</td></tr><tr><td style="text-align:left">-W#warnings</td><td style="text-align:left">%0</td></tr><tr><td style="text-align:left">-Wambiguous-macro</td><td style="text-align:left">ambiguous expansion of macro %0</td></tr><tr><td style="text-align:left">-Wauto-import</td><td style="text-align:left">treating #%select{include&#124;import&#124;include_next&#124;__include_macros}0 as an import of module ‘%1’</td></tr><tr><td style="text-align:left">-Wbackslash-newline-escape</td><td style="text-align:left">backslash and newline separated by space</td></tr><tr><td style="text-align:left">-Wc++11-compat</td><td style="text-align:left">identifier after literal will be treated as a user-defined literal suffix in C++11</td></tr><tr><td style="text-align:left">-Wc++11-compat</td><td style="text-align:left">‘%0’ is a keyword in C++11</td></tr><tr><td style="text-align:left">-Wc++98-c++11-compat</td><td style="text-align:left">digit separators are incompatible with C++ standards before C++1y</td></tr><tr><td style="text-align:left">-Wc++98-c++11-compat-pedantic</td><td style="text-align:left">binary integer literals are incompatible with C++ standards before C++1y</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">raw string literals are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">unicode literals are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">universal character name referring to a control character is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">‘::’ is treated as digraph ‘:’ (aka ‘[‘) followed by ‘:’ in C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">using this character in an identifier is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">specifying character ‘%0’ with a universal character name is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat-pedantic</td><td style="text-align:left">variadic macros are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat-pedantic</td><td style="text-align:left">#line number greater than 32767 is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat-pedantic</td><td style="text-align:left">C++98 requires newline at end of file</td></tr><tr><td style="text-align:left">-Wc++98-compat-pedantic</td><td style="text-align:left">empty macro arguments are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc99-compat</td><td style="text-align:left">unicode literals are incompatible with C99</td></tr><tr><td style="text-align:left">-Wc99-compat</td><td style="text-align:left">%select{using this character in an identifier&#124;starting an identifier with this character}0 is incompatible with C99</td></tr><tr><td style="text-align:left">-Wcomment</td><td style="text-align:left">‘&#124;*’ within block comment</td></tr><tr><td style="text-align:left">-Wcomment</td><td style="text-align:left">escaped newline between *&#124; characters at block comment end</td></tr><tr><td style="text-align:left">-Wdisabled-macro-expansion</td><td style="text-align:left">disabled expansion of recursive macro</td></tr><tr><td style="text-align:left">-Wheader-guard</td><td style="text-align:left">%0 is used as a header guard here, followed by #define of a different macro</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">unknown attribute ‘%0’</td></tr><tr><td style="text-align:left">-Wincomplete-module</td><td style="text-align:left">header ‘%0’ is included in module ‘%1’ but not listed in module map</td></tr><tr><td style="text-align:left">-Wincomplete-umbrella</td><td style="text-align:left">umbrella header for module ‘%0’ does not include header ‘%1’</td></tr><tr><td style="text-align:left">-Winvalid-token-paste</td><td style="text-align:left">pasting formed ‘%0’, an invalid preprocessing token, DefaultError</td></tr><tr><td style="text-align:left">-Wmalformed-warning-check</td><td style="text-align:left">__has_warning expected option name (e.g. \”-Wundef\”)</td></tr><tr><td style="text-align:left">-Wnewline-eof</td><td style="text-align:left">no newline at end of file</td></tr><tr><td style="text-align:left">-Wnull-character</td><td style="text-align:left">null character ignored</td></tr><tr><td style="text-align:left">-Wnull-character</td><td style="text-align:left">null character(s) preserved in string literal</td></tr><tr><td style="text-align:left">-Wnull-character</td><td style="text-align:left">null character(s) preserved in character literal</td></tr><tr><td style="text-align:left">-Wtrigraphs</td><td style="text-align:left">ignored trigraph would end block comment</td></tr><tr><td style="text-align:left">-Wtrigraphs</td><td style="text-align:left">trigraph ignored</td></tr><tr><td style="text-align:left">-Wundef</td><td style="text-align:left">%0 is not defined, evaluates to 0</td></tr><tr><td style="text-align:left">-Wunicode</td><td style="text-align:left">universal character names are only valid in C99 or C++ treating as ‘\‘ followed by identifier</td></tr><tr><td style="text-align:left">-Wunicode</td><td style="text-align:left">\%0 used with no following hex digits treating as ‘\‘ followed by identifier</td></tr><tr><td style="text-align:left">-Wunicode</td><td style="text-align:left">incomplete universal character name treating as ‘\‘ followed by identifier</td></tr><tr><td style="text-align:left">-Wunicode</td><td style="text-align:left">universal character name refers to a surrogate character</td></tr><tr><td style="text-align:left">-Wunknown-pragmas</td><td style="text-align:left">unknown pragma ignored</td></tr><tr><td style="text-align:left">-Wunknown-pragmas</td><td style="text-align:left">pragma STDC FENV_ACCESS ON is not supported, ignoring pragma</td></tr><tr><td style="text-align:left">-Wunused-macros</td><td style="text-align:left">macro is not used</td></tr></tbody></table><h2 id="Parser-Warnings-解析器警告"><a href="#Parser-Warnings-解析器警告" class="headerlink" title="Parser Warnings(解析器警告)"></a>Parser Warnings(解析器警告)</h2><table><thead><tr><th style="text-align:left"><style> table th:first-of-type { width: 20%; } </style>Warning</th><th style="text-align:left"><style> table th:nth-of-type(2) { width: 80%; } </style>Message </th></tr></thead><tbody><tr><td style="text-align:left">-Warc-bridge-casts-disallowed-in-nonarc</td><td style="text-align:left">‘%0’ casts have no effect when not using ARC</td></tr><tr><td style="text-align:left">-Wattributes</td><td style="text-align:left">unknown __declspec attribute %0 ignored</td></tr><tr><td style="text-align:left">-Wavailability</td><td style="text-align:left">‘unavailable’ availability overrides all other availability information</td></tr><tr><td style="text-align:left">-Wc++11-compat</td><td style="text-align:left">use of right-shift operator (‘’) in template argument will require parentheses in C++11</td></tr><tr><td style="text-align:left">-Wc++11-compat</td><td style="text-align:left">‘auto’ storage class specifier is redundant and incompatible with C++11</td></tr><tr><td style="text-align:left">-Wc++98-c++11-compat</td><td style="text-align:left">‘decltype(auto)’ type specifier is incompatible with C++ standards before C++1y</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">range-based for loop is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">alias declarations are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">in-class initialization of non-static data members is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">defaulted function definitions are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">rvalue references are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">reference qualifiers on functions are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">inline namespaces are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">generalized initializer lists are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">trailing return types are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">enumeration types with a fixed underlying type are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">alignof expressions are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">‘%0’ keyword is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">‘decltype’ type specifier is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">deleted function definitions are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">consecutive right angle brackets are incompatible with C++98 (use ‘&gt; &gt;’)</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">static_assert declarations are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">scoped enumerations are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">lambda expressions are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">attributes are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">‘alignas’ is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">noexcept specifications are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">literal operators are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">noexcept expressions are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat</td><td style="text-align:left">‘nullptr’ is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat-pedantic</td><td style="text-align:left">extra ‘’ outside of a function is incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat-pedantic</td><td style="text-align:left">extern templates are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wc++98-compat-pedantic</td><td style="text-align:left">commas at the end of enumerator lists are incompatible with C++98</td></tr><tr><td style="text-align:left">-Wdangling-else</td><td style="text-align:left">add explicit braces to avoid dangling else</td></tr><tr><td style="text-align:left">-Wdeprecated</td><td style="text-align:left">Use of ‘long’ with ‘__vector’ is deprecated</td></tr><tr><td style="text-align:left">-Wdeprecated-declarations</td><td style="text-align:left">use of C-style parameters in Objective-C method declarations is deprecated</td></tr><tr><td style="text-align:left">-Wdeprecated-register</td><td style="text-align:left">‘register’ storage class specifier is deprecated</td></tr><tr><td style="text-align:left">-Wduplicate-decl-specifier</td><td style="text-align:left">duplicate ‘%0’ declaration specifier</td></tr><tr><td style="text-align:left">-Wextra-semi</td><td style="text-align:left">extra ‘;’ after member function definition</td></tr><tr><td style="text-align:left">-Wextra-tokens</td><td style="text-align:left">“extra tokens at the end of ‘#pragma omp %0’ are ignored</td></tr><tr><td style="text-align:left">-Wgcc-compat</td><td style="text-align:left">GCC does not allow %0 attribute in this position on a function definition</td></tr><tr><td style="text-align:left">-Wignored-attributes</td><td style="text-align:left">attribute %0 ignored, because it is not attached to a declaration</td></tr><tr><td style="text-align:left">-Wmicrosoft-exists</td><td style="text-align:left">dependent %select{<strong>if_not_exists&#124;</strong>if_exists}0 declarations are ignored</td></tr><tr><td style="text-align:left">-Wmissing-selector-name</td><td style="text-align:left">%0 used as the name of the previous parameter rather than as part of the selector</td></tr><tr><td style="text-align:left">-Wsemicolon-before-method-body</td><td style="text-align:left">semicolon before method body is ignored</td></tr><tr><td style="text-align:left">-Wsource-uses-openmp</td><td style="text-align:left">“unexpected ‘#pragma omp …’ in program</td></tr><tr><td style="text-align:left">-Wstatic-inline-explicit-instantiation</td><td style="text-align:left">ignoring ‘%select{static&#124;inline}0’ keyword on explicit template instantiation</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用方式&quot;&gt;&lt;a href=&quot;#使用方式&quot; class=&quot;headerlink&quot; title=&quot;使用方式&quot;&gt;&lt;/a&gt;使用方式&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;在需要忽略警告的方法中使用一下代码标注即可:    
#pragma clang diagnostic pu
      
    
    </summary>
    
      <category term="iOS" scheme="http://liyb.club/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://liyb.club/tags/Objective-C/"/>
    
      <category term="Swift" scheme="http://liyb.club/tags/Swift/"/>
    
      <category term="Xcode" scheme="http://liyb.club/tags/Xcode/"/>
    
  </entry>
  
</feed>
