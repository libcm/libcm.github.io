<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[给自己git项目添加pod支持]]></title>
    <url>%2F2018%2F11%2F27%2F%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84Git%E4%BB%93%E5%BA%93%E6%B7%BB%E5%8A%A0pod%E6%94%AF%E6%8C%81%2F</url>
    <content type="text"><![CDATA[创建git仓库 进github，登录自己账号。如果没有自行注册。 创建个新仓库 把项目clone到本地 把自己需要添加pod支持的库添加进刚才clone的项目中 添加pod支持创建podspec文件$ cd 刚才clone的项目路径 $ pod spec create 发布的名 编辑podspec文件 设置release版本首先上传本地仓库至github 点击release，此处我以添加过，所以显示为1 验证$ pod lib lint podspec文件名.podspec 结果多种多样根据错误提示进行修改podspec文件，如果没有错误只有警告，可以使用下面的命令进行忽略 $ pod lib lint podspec文件名.podspec —allow-warnings 看到 xxx passed validation 说明成功 注册Cocoapods账号$ pod trunk register 邮箱地址 &apos;用户名&apos; —description=&apos;描述信息&apos; 注: 用户名和描述信息带引号 之后进入邮箱进行验证就可以了 上传代码到Cocoapods$ pod trunk push podspec文件路径 成功后可以使用pod search进行查看 如果pod search搜不到，可以进入此文件夹下`~/Library/Caches/CocoaPods/`删除`search_index.json`文件]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Other</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Protocal Buffers for iOS的安装及使用(使用篇)]]></title>
    <url>%2F2018%2F11%2F27%2FProtocal%20Buffers%20for%20iOS%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8(%E4%BD%BF%E7%94%A8%E7%AF%87)%2F</url>
    <content type="text"><![CDATA[使用下载源码 1.从https://github.com/google/protobuf.git下载源码，解压，里面有支持不同语言的版本源码，我们只需要里面的支持objc的文件夹名为：objectivec 2.新建一个工程命名为ProtocolBufferTest，创建一个文件夹，假设命名为：protocolbuf， 把第一步的pb源码复制到此文件夹中： 3.使用Xcode打开工程，点击左下角+， 引用protocolBuffer源文件到工程中(源文件里面有两个工程配置文件：ProtocolBuffers_iOS.xcodeproj和ProtocolBuffers_OSX.xcodeproj，引用ProtocolBuffers_iOS.xcodeproj就好) 4.选中工程: targets—&gt;Build Phases—&gt;Link Binary With Libraries， 引用源码静态库文件：libProtocolBuffers.a 5.在工程设置搜索静态库的头文件（pb文件在protocolbuf文件夹里面）:targets—&gt;Build Setting—&gt;Search Paths—&gt;Header Search Paths, 写入：$(PROJECT)/protocolbuf 6.编写测试文件*.proto，比如新建一个文件Person.proto, 按照官方标准语法https://developers.google.com/protocol-buffers/ 编写通用代码，写好后在终端进入该Person.proto文件所在目录，使用protoc命令：protoc *.proto --objc_out=../Pro_out 进行编译。把Person.proto文件编译成Person.pbobjc.h和Person.pbobjc.m, 生成的文件在Pro_out文件夹里面。如果Person.proto源文件有语法问题，编译时会报错；当编译时什么提示都没有，表示编译成功：将编译好的*.pbobjc.h和*.pbobjc.m拖入工程中，因为不支持arc, 所以需要在*.pbobjc.m设置-fno-objc-arc, 然后就可以使用了 7.序列化与反序列化 Person *p = [[Person alloc] init]; p.name = @&quot;xiao&quot;; p.age = 2; p.address = @&quot;哈哈哈&quot;; NSLog(@&quot;name:%@, age:%zi, address:%@&quot;, p.name, p.age, p.address); // 序列化 NSData *data = [p data]; NSLog(@&quot;data:%@&quot;, data); // 反序列化 NSError *error; Person *per = [Person parseFromData:data error:&amp;error]; if (!error) { NSLog(@&quot;_____name:%@, age:%zi, address:%@_____&quot;, per.name, per.age, per.address); }]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Protocal Buffers</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Protocal Buffers for iOS的安装及使用(安装篇)]]></title>
    <url>%2F2018%2F11%2F27%2FProtocl%20Buffers%20for%20iOS%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%AE%89%E8%A3%85%E7%AF%87)%2F</url>
    <content type="text"><![CDATA[安装安装Protocal Buffers 执行 brew -v 命令 这条命令是查看你的mac里面有没有装brew。brew是mac os里面，类似于ubuntu的apt-get的功能，都可以直接在终端输入命令然后安装程序。－v自然就是版本version的意思 下载brew安装环境 ruby -e $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install) 分别执行下面三条命令 brew install automake brew install libtool brew install protobuf 就是利用brew下载安装了。protobuf就是我们想要的，另外两个是依赖库 clone Protocal Buffers库 执行下列命令 git clone https://github.com/alexeyxo/protobuf-objc.git ./build.sh 从github下载protobuf－objc这个工程，build脚本里面做的是编译 注意：编译工程过程中，有可能会出现错误。别慌！看编译错误的提示。一般错误只是因为环境变量和路径没有配置好，少了一些东西，例如少了编译protobuf这个工程的依赖库，按照提示添加路径即可。有了工程以后，我们就可以开始测试一下怎么用protobuf了 导入工程 打开Xcode！新建一个工程！ 然后有两个方法把protobuf添加到你的工程里面，一个是直接添加，一个是利用cocoapod 强烈推荐后者，因为cocoapods能够很方便的管理第三方类库，以后人家的工程升级了，你只需要一行 pod update 就ok了。关于安装和使用cocoapod，属于另一个话题，在Podfile添加下面这个句子 platform :ios , 8.0 pod ProtocolBuffers, 在保存之后，到终端，cd到工程里面， pod install 等一会，cocoapod就会帮我们添加好，以后我们就应该打开 project的workspace，因为添加了pod作为子工程。 创建Protocal Buffers文件 在你的工程里面，新建一个文件夹，假如命名叫Protobuf 在这个文件夹里面新建一个proto文件。例如要在本地储存用户信息，那么就新建一个user.proto 里面内容可以如下 syntax = &quot;proto2&quot;; // Protocal Buffers版本 message PBUser { required string userId = 1; // 用户ID optional string nick = 2; // 用户昵称 optional string avatar = 3; // 用户头像 optional string password = 7; optional string email = 8; optional string mobile = 9; // 手机号码 optional string qqOpenId = 10; // QQ ID optional string sinaId = 11; // SINA UserID optional string weixinId = 12; // WeChat UserID } 上面这个例子包括了几个要素。 一个是包名。包的概念在object c里面没有，java里面有，c++里面namespace也是差不多意思。 顺便提一下，oc里面一般在库名前面添加两个字母，起的作用差不多就是包的作用，作为类的上一层组织结构。 例如官方的NS，例如AFNetworking这种第三方类库的AF。 回到正题。编写pb文件，第二个要素是message 一个message就是一个整体，里面有哪些必要的内容，哪些可选的内容。详细的proto语法随便一找一大把，就不啰嗦了。 Protocal Buffers文件转换 写好了proto，接下来就是编译这个proto文件，protobuf－objc这个类库会编译声称一些源码，是读写proto数据的接口API。 编译命令如下： 先打开工程，建议单独新建一个文件夹作为输出路径，例如工程下新建文件夹Gen，用来放generate出来的.pb.h文件&amp;&amp;.pb.m文件 打开终端 cd到工程路径下 protoc --plugin=/usr/local/bin/protoc-gen-objc person.proto --objc_out=./Gen]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Protocal Buffers</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift和Objective-C中的小知识]]></title>
    <url>%2F2018%2F11%2F27%2FSwift%E5%92%8CObjective-C%2F</url>
    <content type="text"><![CDATA[为什么swift推荐用struct？ struct是值类型，而非引用类型 值类型相对于引用类型是线程安全的 swift对值类型的拷贝进行了足够的优化 对enum、struct、function给予了更大的支持 swift是否支持runtime？ swift是静态语言，在编译时就确定了类型。oc是在运行的时候知道类型的。swift的效率要高一些。所以swift不建议使用runtime。 swift本身对runtime并不支持，需要在属性或者方法前面添加’dynamic’修饰符才能获取动态性，继承自NSObject的类起继承的弗雷的方法也具有动态性，子类的属性和方法也需要家’dynamic’才能获取动态性。 字符串常量const NSString * kSomeConstantString = @&quot;&quot;; const 类型 * 变量名：可以改变指针的指向，不能改变指针指向的内容. NSString * const kSomeConstantString = @&quot;&quot;; 类型 * const 变量名：可以改变指针指向的内容，不能改变指针的指向. NSString用copy或strong关键字的区别相同点: NSString是不可变，copy和strong都是分配一次内存 不同点: copy会先判断NSString是不是可变的，如果是不可变就不在分配内存，是可变的就分配内存。 strong不会判断NSString是不是可变的 总结: 如果大量运用NSString的话，如果确定NSString是不可变的就可以直接用strong]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift高阶函数]]></title>
    <url>%2F2018%2F11%2F27%2FSwift%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Map 转换，可以将数组中的元素格式进行转换 // 将int数组转换成String数组 // $0代表数组的元素 let array = [1, 2, 3, 4, 5] let result = array.map { String($0) } Filter 过滤，可以对数组中元素按照某种规律进行过滤 // 在array中过滤出偶数 let result = array.filter { $0 % 2 == 0 } Reduce 计算，可以对数组中的元素进行计算 // 计算数组array元素的和 // 在这里$0和$1的意义不同，$0代表计算后的结果，$1代表元素 // 10代表初始值，在这里可以理解为 $0初始值 = 10 let result = array.reduce(10) { $0 + $1 }]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xcode警告忽略]]></title>
    <url>%2F2018%2F11%2F27%2FXcode%E8%AD%A6%E5%91%8A%E5%BF%BD%E7%95%A5%2F</url>
    <content type="text"><![CDATA[使用方式在需要忽略警告的方法中使用一下代码标注即可: #pragma clang diagnostic push #pragma clang diagnostic ignored &quot;警告类型&quot; // 需要忽略警告的代码 #pragma clang diagnostic pop 警告类型原文地址:点击这里跳转 Semantic Warnings(语义警告) table th:first-of-type { width: 20%; } Warning table th:nth-of-type(2) { width: 80%; } Message -WCFString-literal input conversion stopped due to an input byte that does not belong to the input codeset UTF-8 -WNSObject-attribute __attribute ((NSObject)) may be put on a typedef only, attribute is ignored -Wabstract-vbase-init initializer for virtual base class %0 of abstract class %1 will never be used -Waddress-of-array-temporary pointer is initialized by a temporary array, which will be destroyed at the end of the full-expression -Warc-maybe-repeated-use-of-weak “weak %select{variable&#124;property&#124;implicit property&#124;instance variable}0 %1 may be accessed multiple times in this %select{function&#124;method&#124;block&#124;lambda}2 and may be unpredictably set to nil assign to a strong variable to keep the object alive -Warc-non-pod-memaccess %select{destination for&#124;source of}0 this %1 call is a pointer to ownership-qualified type %2 -Warc-performSelector-leaks performSelector may cause a leak because its selector is unknown -Warc-repeated-use-of-weak “weak %select{variable &#124;property&#124;implicit property&#124;instance variable}0 %1 is accessed multiple times in this %select{function&#124;method&#124;block&#124;lambda}2 but may be unpredictably set to nil assign to a strong variable to keep the object alive -Warc-retain-cycles capturing %0 strongly in this block is likely to lead to a retain cycle -Warc-unsafe-retained-assign assigning retained object to unsafe property object will be released after assignment -Warc-unsafe-retained-assign assigning %select{array literal&#124;dictionary literal&#124;numeric literal&#124;boxed expression&#124;should not happen&#124;block literal}0 to a weak %select{property&#124;variable}1 object will be released after assignment -Warc-unsafe-retained-assign assigning retained object to %select{weak&#124;unsafe_unretained}0 %select{property&#124;variable}1 object will be released after assignment -Warray-bounds array index %0 is past the end of the array (which contains %1 element%s2) -Warray-bounds array index %0 is before the beginning of the array -Warray-bounds ‘static’ has no effect on zero-length arrays -Warray-bounds array argument is too small contains %0 elements, callee requires at least %1 -Warray-bounds-pointer-arithmetic the pointer incremented by %0 refers past the end of the array (that contains %1 element%s2) -Warray-bounds-pointer-arithmetic the pointer decremented by %0 refers before the beginning of the array -Wassign-enum integer constant not in range of enumerated type %0 -Watomic-property-with-user-defined-accessor writable atomic property %0 cannot pair a synthesized %select{getter&#124;setter}1 with a user defined %select{getter&#124;setter}2 -Wattributes unknown attribute %0 ignored -Wauto-var-id ‘auto’ deduced as ‘id’ in declaration of %0 -Wavailability unknown platform %0 in availability macro -Wavailability overriding method %select{introduced after&#124;deprecated before&#124;obsoleted before}0 overridden method on %1 (%2 vs. %3) -Wavailability availability does not match previous declaration -Wavailability overriding method cannot be unavailable on %0 when its overridden method is available -Wavailability feature cannot be %select{introduced&#124;deprecated&#124;obsoleted}0 in %1 version %2 before it was %select{introduced&#124;deprecated&#124;obsoleted}3 in version %4 attribute ignored -Wbad-function-cast cast from function call of type %0 to non-matching type %1 -Wbitfield-constant-conversion implicit truncation from %2 to bitfield changes value from %0 to %1 -Wbitwise-op-parentheses ‘&amp;’ within &#124; -Wbool-conversion “initialization of pointer of type %0 to null from a constant boolean “ “expression -Wbridge-cast %0 cannot bridge to %1 -Wbridge-cast %0 bridges to %1, not %2 -Wbuiltin-requires-header declaration of built-in function ‘%0’ requires inclusion of the header stdio.h -Wbuiltin-requires-header declaration of built-in function ‘%0’ requires inclusion of the header setjmp.h -Wbuiltin-requires-header declaration of built-in function ‘%0’ requires inclusion of the header ucontext.h -Wc++-compat %select{&#124;empty }0%select{struct&#124;union}1 has size 0 in C, %select{size 1&#124;non-zero size}2 in C++ -Wc++11-compat explicit instantiation cannot be ‘inline’ -Wc++11-compat explicit instantiation of %0 must occur at global scope -Wc++11-compat explicit instantiation of %0 not in a namespace enclosing %1 -Wc++11-compat explicit instantiation of %q0 must occur in namespace %1 -Wc++11-narrowing constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11 -Wc++11-narrowing type %0 cannot be narrowed to %1 in initializer list in C++11 -Wc++11-narrowing non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11 -Wc++98-c++11-compat type definition in a constexpr %select{function&#124;constructor}0 is incompatible with C++ standards before C++1y -Wc++98-c++11-compat use of this statement in a constexpr %select{function&#124;constructor}0 is incompatible with C++ standards before C++1y -Wc++98-c++11-compat init-captures.def warn_cxx11_compat_init_capture : Warning “initialized lambda captures are incompatible with C++ standards “ “before C++1y -Wc++98-c++11-compat variable declaration in a constexpr %select{function&#124;constructor}0 is incompatible with C++ standards before C++1y -Wc++98-c++11-compat constexpr function with no return statements is incompatible with C++ standards before C++1y -Wc++98-c++11-compat multiple return statements in constexpr function is incompatible with C++ standards before C++1y -Wc++98-c++11-compat variable templates are incompatible with C++ standards before C++1y -Wc++98-compat substitution failure due to access control is incompatible with C++98 -Wc++98-compat %select{anonymous struct&#124;union}0 member %1 with a non-trivial %select{constructor&#124;copy constructor&#124;move constructor&#124;copy assignment operator&#124;move assignment operator&#124;destructor}2 is incompatible with C++98 -Wc++98-compat enumeration type in nested name specifier is incompatible with C++98 -Wc++98-compat static data member %0 in union is incompatible with C++98 -Wc++98-compat default template arguments for a function template are incompatible with C++98 -Wc++98-compat scalar initialized from empty initializer list is incompatible with C++98 -Wc++98-compat befriending %1 without ‘%select{struct&#124;interface&#124;union&#124;class&#124;enum}0’ keyword is incompatible with C++98 -Wc++98-compat use of null pointer as non-type template argument is incompatible with C++98 -Wc++98-compat friend declaration naming a member of the declaring class is incompatible with C++98 -Wc++98-compat non-class friend type %0 is incompatible with C++98 -Wc++98-compat befriending enumeration type %0 is incompatible with C++98 -Wc++98-compat use of non-static data member %0 in an unevaluated context is incompatible with C++98 -Wc++98-compat friend function %0 would be implicitly redefined in C++98 -Wc++98-compat %select{class template&#124;class template partial&#124;variable template&#124;variable template partial&#124;function template&#124;member function&#124;static data member&#124;member class&#124;member enumeration}0 specialization of %1 outside namespace %2 is incompatible with C++98 -Wc++98-compat reference initialized from initializer list is incompatible with C++98 -Wc++98-compat redundant parentheses surrounding address non-type template argument are incompatible with C++98 -Wc++98-compat initialization of initializer_list object is incompatible with C++98 -Wc++98-compat use of ‘template’ keyword outside of a template is incompatible with C++98 -Wc++98-compat non-type template argument referring to %select{function&#124;object}0 %1 with internal linkage is incompatible with C++98 -Wc++98-compat use of ‘typename’ outside of a template is incompatible with C++98 -Wc++98-compat passing object of trivial but non-POD type %0 through variadic %select{function&#124;block&#124;method&#124;constructor}1 is incompatible with C++98 -Wc++98-compat goto would jump into protected scope in C++98 -Wc++98-compat constructor call from initializer list is incompatible with C++98 -Wc++98-compat ‘auto’ type specifier is incompatible with C++98 -Wc++98-compat delegating constructors are incompatible with C++98 -Wc++98-compat ‘constexpr’ specifier is incompatible with C++98 -Wc++98-compat inheriting constructors are incompatible with C++98 -Wc++98-compat explicit conversion functions are incompatible with C++98 -Wc++98-compat switch case would be in a protected scope in C++98 -Wc++98-compat ‘%0’ type specifier is incompatible with C++98 -Wc++98-compat indirect goto might cross protected scopes in C++98 -Wc++98-compat-pedantic cast between pointer-to-function and pointer-to-object is incompatible with C++98 -Wc++98-compat-pedantic implicit conversion from array size expression of type %0 to %select{integral&#124;enumeration}1 type %2 is incompatible with C++98 -Wcast-align cast from %0 to %1 increases required alignment from %2 to %3 -Wcast-of-sel-type cast of type %0 to %1 is deprecated use sel_getName instead -Wchar-subscripts array subscript is of type ‘char’ -Wconditional-uninitialized variable %0 may be uninitialized when %select{used here&#124;captured by block}1 -Wconstant-logical-operand use of logical ‘%0’ with constant operand -Wconstexpr-not-const ‘constexpr’ non-static member function will not be implicitly ‘const’ in C++1y add ‘const’ to avoid a change in behavior -Wconsumed state of variable ‘%0’ must match at the entry and exit of loop -Wconsumed parameter ‘%0’ not in expected state when the function returns: expected ‘%1’, observed ‘%2’ -Wconsumed argument not in expected state expected ‘%0’, observed ‘%1’ -Wconsumed invalid invocation of method ‘%0’ on a temporary object while it is in the ‘%1’ state -Wconsumed return state set for an unconsumable type ‘%0’ -Wconsumed consumed analysis attribute is attached to member of class ‘%0’ which isn’t marked as consumable -Wconsumed invalid invocation of method ‘%0’ on object ‘%1’ while it is in the ‘%2’ state -Wconsumed return value not in expected state expected ‘%0’, observed ‘%1’ -Wconversion implicit conversion discards imaginary component: %0 to %1 -Wconversion non-type template argument with value ‘%0’ converted to ‘%1’ for unsigned template parameter of type %2 -Wconversion implicit conversion loses floating-point precision: %0 to %1 -Wconversion implicit conversion loses integer precision: %0 to %1 -Wconversion non-type template argument value ‘%0’ truncated to ‘%1’ for template parameter of type %2 -Wconversion implicit conversion turns vector to scalar: %0 to %1 -Wconversion implicit conversion turns floating-point number into integer: %0 to %1 -Wcovered-switch-default default label in switch which covers all enumeration values -Wcustom-atomic-properties atomic by default property %0 has a user defined %select{getter&#124;setter}1 (property should be marked ‘atomic’ if this is intended) -Wdangling-field initializing pointer member %0 with the stack address of parameter %1 -Wdangling-field binding reference %select{&#124;subobject of }1member %0 to a temporary value -Wdangling-field binding reference member %0 to stack allocated parameter %1 -Wdangling-initializer-list array backing the initializer list will be destroyed at the end of %select{the full-expression&#124;the constructor}0 -Wdelete-incomplete deleting pointer to incomplete type %0 may cause undefined behavior -Wdelete-non-virtual-dtor delete called on %0 that is abstract but has non-virtual destructor -Wdelete-non-virtual-dtor delete called on %0 that has virtual functions but non-virtual destructor -Wdeprecated access declarations are deprecated use using declarations instead -Wdeprecated definition of implicit copy %select{constructor&#124;assignment operator}1 for %0 is deprecated because it has a user-declared %select{copy %select{assignment operator&#124;constructor}1&#124;destructor}2 -Wdeprecated dynamic exception specifications are deprecated -Wdeprecated-increment-bool incrementing expression of type bool is deprecated -Wdeprecated-objc-isa-usage assignment to Objective-C’s isa is deprecated in favor of object_setClass() -Wdeprecated-objc-isa-usage direct access to Objective-C’s isa is deprecated in favor of object_getClass() -Wdeprecated-objc-pointer-introspection bitmasking for introspection of Objective-C object pointers is strongly discouraged -Wdeprecated-objc-pointer-introspection-performSelector warn_objc_pointer_masking.Text -Wdeprecated-writable-strings dummy warning to enable -fconst-strings -Wdirect-ivar-access instance variable %0 is being directly accessed -Wdistributed-object-modifiers conflicting distributed object modifiers on return type in implementation of %0 -Wdistributed-object-modifiers conflicting distributed object modifiers on parameter type in implementation of %0 -Wdivision-by-zero division by zero is undefined -Wdivision-by-zero remainder by zero is undefined -Wdocumentation parameter ‘%0’ not found in the function declaration -Wdocumentation not a Doxygen trailing comment -Wduplicate-enum element %0 has been implicitly assigned %1 which another element has been assigned -Wduplicate-method-match multiple declarations of method %0 found and ignored -Wdynamic-class-memaccess %select{destination for&#124;source of&#124;first operand of&#124;second operand of}0 this %1 call is a pointer to dynamic class %2 vtable pointer will be %select{overwritten&#124;copied&#124;moved&#124;compared}3 -Wempty-body switch statement has empty body -Wempty-body for loop has empty body -Wempty-body if statement has empty body -Wempty-body range-based for loop has empty body -Wempty-body while loop has empty body -Wenum-compare comparison of two values with different enumeration types% diff{ ($ and $)&#124;}0,1 -Wenum-conversion implicit conversion from enumeration type %0 to different enumeration type %1 -Wexit-time-destructors declaration requires an exit-time destructor -Wexplicit-ownership-type method parameter of type %0 with no explicit ownership -Wextern-c-compat %select{&#124;empty }0%select{struct&#124;union}1 has size 0 in C, %select{size 1&#124;non-zero size}2 in C++ -Wextern-initializer ‘extern’ variable has an initializer -Wfloat-equal comparing floating point with == or != is unsafe -Wformat “data argument position ‘%0’ exceeds the number of data arguments (%1) -Wformat position arguments in format strings start counting at 1 (not 0) -Wformat invalid position specified for %select{field width&#124;field precision}0 -Wformat cannot mix positional and non-positional arguments in format string -Wformat values of type ‘%0’ should not be used as format arguments add an explicit cast to %1 instead -Wformat format specifies type %0 but the argument has type %1 -Wformat zero field width in scanf format string is unused -Wformat no closing ‘]’ for ‘%%[‘ in scanf format string -Wformat format string should not be a wide string -Wformat format string contains ‘\0’ within the string body -Wformat ‘%select{&#124;.}0’ specified field %select{width&#124;precision}0 is missing a matching ‘int’ argument -Wformat field %select{width&#124;precision}0 should have type %1, but argument has type %2 -Wformat %select{field width&#124;precision}0 used with ‘%1’ conversion specifier, resulting in undefined behavior -Wformat format string missing -Wformat incomplete format specifier -Wformat flag ‘%0’ results in undefined behavior with ‘%1’ conversion specifier -Wformat flag ‘%0’ is ignored when flag ‘%1’ is present -Wformat more ‘%%’ conversions than data arguments -Wformat length modifier ‘%0’ results in undefined behavior or no effect with ‘%1’ conversion specifier -Wformat-extra-args data argument not used by format string -Wformat-invalid-specifier invalid conversion specifier ‘%0’ -Wformat-nonliteral format string is not a string literal -Wformat-security format string is not a string literal (potentially insecure) -Wformat-zero-length format string is empty -Wgcc-compat GCC does not allow the ‘cleanup’ attribute argument to be anything other than a simple identifier -Wglobal-constructors declaration requires a global constructor -Wglobal-constructors declaration requires a global destructor -Wgnu-conditional-omitted-operand use of GNU ?: conditional expression extension, omitting middle operand -Wheader-hygiene using namespace directive in global context in header -Widiomatic-parentheses using the result of an assignment as a condition without parentheses -Wignored-attributes ‘malloc’ attribute only applies to functions returning a pointer type -Wignored-attributes %0 attribute only applies to %select{functions&#124;unions&#124;variables and functions&#124;functions and methods&#124;parameters&#124;functions, methods and blocks&#124;functions, methods, and classes&#124;functions, methods, and parameters&#124;classes&#124;variables&#124;methods&#124;variables, functions and labels&#124;fields and global variables&#124;structs&#124;variables, functions and tag types&#124;thread-local variables&#124;variables and fields&#124;variables, data members and tag types&#124;types and namespaces&#124;Objective-C interfaces}1 -Wignored-attributes ‘%0’ attribute cannot be specified on a definition -Wignored-attributes __weak attribute cannot be specified on an automatic variable when ARC is not enabled -Wignored-attributes Objective-C GC does not allow weak variables on the stack -Wignored-attributes __weak attribute cannot be specified on a field declaration -Wignored-attributes attribute %0 cannot be applied to %select{functions&#124;Objective-C method}1 without return value -Wignored-attributes attribute declaration must precede definition -Wignored-attributes attribute %0 is ignored, place it after \”%select{class&#124;struct&#124;union&#124;interface&#124;enum}1\” to apply attribute to type declaration -Wignored-attributes __declspec attribute %0 is not supported -Wignored-attributes attribute %0 ignored, because it cannot be applied to a type -Wignored-attributes attribute %0 after definition is ignored -Wignored-attributes %0 attribute ignored -Wignored-attributes ‘sentinel’ attribute only supported for variadic %select{functions&#124;blocks}0 -Wignored-attributes ‘sentinel’ attribute requires named arguments -Wignored-attributes ‘%0’ only applies to %select{function&#124;pointer&#124;Objective-C object or block pointer}1 types type here is %2 -Wignored-attributes ‘nonnull’ attribute applied to function with no pointer arguments -Wignored-attributes %0 attribute can only be applied to instance variables or properties -Wignored-attributes ibaction attribute can only be applied to Objective-C instance methods -Wignored-attributes %0 calling convention ignored on variadic function -Wignored-attributes %0 only applies to variables with static storage duration and functions -Wignored-attributes %0 attribute argument not supported: %1 -Wignored-attributes #pramga ms_struct can not be used with dynamic classes or structures -Wignored-attributes transparent union definition must contain at least one field transparent_union attribute ignored -Wignored-attributes first field of a transparent union cannot have %select{floating point&#124;vector}0 type %1 transparent_union attribute ignored -Wignored-attributes ‘gnu_inline’ attribute requires function to be marked ‘inline’, attribute ignored -Wignored-attributes calling convention %0 ignored for this target -Wignored-attributes transparent_union attribute can only be applied to a union definition attribute ignored -Wignored-attributes %select{alignment&#124;size}0 of field %1 (%2 bits) does not match the %select{alignment&#124;size}0 of the first field in transparent union transparent_union attribute ignored -Wignored-attributes attribute %0 is already applied -Wignored-attributes %0 attribute ignored for field of type %1 -Wignored-attributes %0 attribute ignored when parsing type -Wignored-attributes %0 attribute only applies to %select{functions&#124;methods&#124;properties}1 that return %select{an Objective-C object&#124;a pointer&#124;a non-retainable pointer}2 -Wignored-attributes %0 attribute only applies to %select{Objective-C object&#124;pointer}1 parameters -Wignored-attributes attribute %0 is already applied with different parameters -Wignored-attributes unknown visibility %0 -Wignored-qualifiers “‘%0’ type qualifier%s1 on return type %plural{1:has&#124;:have}1 no effect -Wignored-qualifiers ARC %select{unused&#124;unsafe_unretained&#124;strong&#124;weak&#124;autoreleasing}0 lifetime qualifier on return type is ignored -Wimplicit-atomic-properties property is assumed atomic by default -Wimplicit-atomic-properties property is assumed atomic when auto-synthesizing the property -Wimplicit-fallthrough fallthrough annotation in unreachable code -Wimplicit-fallthrough unannotated fall-through between switch labels -Wimplicit-fallthrough fallthrough annotation does not directly precede switch label -Wimplicit-function-declaration implicit declaration of function %0 -Wimplicit-function-declaration use of unknown builtin %0 -Wimplicit-retain-self “block implicitly retains ‘self’ explicitly mention ‘self’ to indicate this is intended behavior -Wincompatible-library-redeclaration incompatible redeclaration of library function %0 -Wincomplete-implementation method definition for %0 not found -Winherited-variadic-ctor inheriting constructor does not inherit ellipsis -Winitializer-overrides subobject initialization overrides initialization of other fields within its enclosing subobject -Winitializer-overrides initializer overrides prior initialization of this subobject -Wint-to-pointer-cast cast to %1 from smaller integer type %0 -Wint-to-void-pointer-cast cast to %1 from smaller integer type %0 -Winvalid-iboutlet IBOutletCollection properties should be copy&#124;strong and not assign -Winvalid-iboutlet %select{instance variable&#124;property}2 with %0 attribute must be an object type (invalid %1) -Winvalid-noreturn function %0 declared ‘noreturn’ should not return -Winvalid-noreturn function declared ‘noreturn’ should not return -Wlarge-by-value-copy return value of %0 is a large (%1 bytes) pass-by-value object pass it by reference instead ? -Wlarge-by-value-copy %0 is a large (%1 bytes) pass-by-value argument pass it by reference instead ? -Wliteral-conversion implicit conversion from %0 to %1 changes value from %2 to %3 -Wliteral-range magnitude of floating-point constant too large for type %0 maximum is %1 -Wliteral-range magnitude of floating-point constant too small for type %0 minimum is %1 -Wlogical-not-parentheses logical not is only applied to the left hand side of this comparison -Wlogical-op-parentheses ‘&amp;&amp;’ within &#124;&#124; -Wloop-analysis variable%select{s&#124; %1&#124;s %1 and %2&#124;s %1, %2, and %3&#124;s %1, %2, %3, and %4}0 used in loop condition not modified in loop body -Wloop-analysis variable %0 is %select{decremented&#124;incremented}1 both in the loop header and in the loop body -Wmethod-signatures conflicting parameter types in implementation of %0: %1 vs %2 -Wmethod-signatures conflicting return type in implementation of %0: %1 vs %2 -Wmicrosoft extra qualification on member %0 -Wmismatched-method-attributes attributes on method implementation and its declaration must match -Wmismatched-parameter-types conflicting parameter types in implementation of %0%diff{: $ vs $&#124;}1,2 -Wmismatched-return-types conflicting return type in implementation of %0% diff{: $ vs $&#124;}1,2 -Wmissing-braces suggest braces around initialization of subobject -Wmissing-declarations ‘%0’ ignored on this declaration -Wmissing-field-initializers missing field ‘%0’ initializer -Wmissing-method-return-type method has no return type specified defaults to ‘id’ -Wmissing-noreturn %select{function&#124;method}0 %1 could be declared with attribute ‘noreturn’ -Wmissing-noreturn block could be declared with attribute ‘noreturn’ -Wmissing-prototypes no previous prototype for function %0 -Wmissing-variable-declarations no previous extern declaration for non-static variable %0 -Wmultiple-move-vbase defaulted move assignment operator of %0 will move assign virtual base class %1 multiple times -Wnested-anon-types anonymous types declared in an anonymous union&#124;struct are an extension -Wno-typedef-redefinition Redefinition of typedef ‘%0’ is a C11 feature -Wnon-literal-null-conversion “expression which evaluates to zero treated as a null pointer constant of “ “type %0 -Wnon-pod-varargs second argument to ‘va_arg’ is of ARC ownership-qualified type %0 -Wnon-pod-varargs cannot pass %select{non-POD&#124;non-trivial}0 object of type %1 to variadic %select{function&#124;block&#124;method&#124;constructor}2 expected type from format string was %3 -Wnon-pod-varargs second argument to ‘va_arg’ is of non-POD type %0 -Wnon-pod-varargs cannot pass object of %select{non-POD&#124;non-trivial}0 type %1 through variadic %select{function&#124;block&#124;method&#124;constructor}2 call will abort at runtime -Wnon-virtual-dtor %0 has virtual functions but non-virtual destructor -Wnonnull null passed to a callee which requires a non-null argument -Wnull-arithmetic use of NULL in arithmetic operation -Wnull-arithmetic comparison between NULL and non-pointer %select{(%1 and NULL)&#124;(NULL and %1)}0 -Wnull-dereference indirection of non-volatile null pointer will be deleted, not trap -Wobjc-autosynthesis-property-ivar-name-match autosynthesized property %0 will use %select{&#124;synthesized}1 instance variable %2, not existing instance variable %3 -Wobjc-forward-class-redefinition redefinition of forward class %0 of a typedef name of an object type is ignored -Wobjc-interface-ivars declaration of instance variables in the interface is deprecated -Wobjc-literal-compare direct comparison of %select{an array literal&#124;a dictionary literal&#124;a numeric literal&#124;a boxed expression&#124;}0 has undefined behavior -Wobjc-literal-missing-atsign string literal must be prefixed by ‘@’ -Wobjc-method-access instance method %objcinstance0 not found (return type defaults to ‘id’) did you mean %objcinstance2? -Wobjc-method-access class method %objcclass0 not found (return type defaults to ‘id’) did you mean %objcclass2? -Wobjc-method-access instance method %objcinstance0 not found (return type defaults to ‘id’) -Wobjc-method-access instance method %0 is being used on ‘Class’ which is not in the root class -Wobjc-method-access class method %objcclass0 not found (return type defaults to ‘id’) -Wobjc-method-access instance method %0 found instead of class method %1 -Wobjc-missing-property-synthesis “auto property synthesis is synthesizing property not explicitly synthesized -Wobjc-missing-super-calls method possibly missing a [super %0] call -Wobjc-noncopy-retain-block-property “retain’ed block property does not copy the block “ “- use copy attribute instead -Wobjc-nonunified-exceptions can not catch an exception thrown with @throw in C++ in the non-unified exception model -Wobjc-property-implementation property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category -Wobjc-property-implementation property %0 requires method %1 to be defined - use @synthesize, @dynamic or provide a method implementation in this class implementation -Wobjc-property-implicit-mismatch “primary property declaration is implicitly strong while redeclaration in class extension is weak -Wobjc-property-matches-cocoa-ownership-rule property’s synthesized getter follows Cocoa naming convention for returning ‘owned’ objects -Wobjc-property-no-attribute no ‘assign’, ‘retain’, or ‘copy’ attribute is specified - ‘assign’ is assumed -Wobjc-property-no-attribute default property attribute ‘assign’ not appropriate for non-GC object -Wobjc-property-synthesis auto property synthesis will not synthesize property ‘%0’ because it is ‘readwrite’ but it will be synthesized ‘readonly’ via another property -Wobjc-property-synthesis “auto property synthesis will not synthesize property ‘%0’ because it cannot share an ivar with another synthesized property -Wobjc-protocol-method-implementation category is implementing a method which will also be implemented by its primary class -Wobjc-protocol-property-synthesis auto property synthesis will not synthesize property declared in a protocol -Wobjc-redundant-literal-use using %0 with a literal is redundant -Wobjc-root-class class %0 defined without specifying a base class -Wobjc-string-compare direct comparison of a string literal has undefined behavior -Wobjc-string-concatenation concatenated NSString literal for an NSArray expression - possibly missing a comma -Wover-aligned type %0 requires %1 bytes of alignment and the default allocator only guarantees %2 bytes -Woverloaded-shift-op-parentheses overloaded operator %select{&#124;}0 has lower precedence than comparison operator -Woverloaded-virtual %q0 hides overloaded virtual %select{function&#124;functions}1 -Woverriding-method-mismatch conflicting distributed object modifiers on parameter type in declaration of %0 -Woverriding-method-mismatch conflicting parameter types in declaration of %0: %1 vs %2 -Woverriding-method-mismatch conflicting variadic declaration of method and its implementation -Woverriding-method-mismatch conflicting distributed object modifiers on return type in declaration of %0 -Woverriding-method-mismatch conflicting parameter types in declaration of %0%diff{: $ vs $&#124;}1,2 -Woverriding-method-mismatch conflicting return type in declaration of %0%diff{: $ vs $&#124;}1,2 -Woverriding-method-mismatch conflicting return type in declaration of %0: %1 vs %2 -Wpacked packed attribute is unnecessary for %0 -Wpadded padding %select{struct&#124;interface&#124;class}0 %1 with %2 %select{byte&#124;bit}3%select{&#124;s}4 to align anonymous bit-field -Wpadded padding %select{struct&#124;interface&#124;class}0 %1 with %2 %select{byte&#124;bit}3%select{&#124;s}4 to align %5 -Wpadded padding size of %0 with %1 %select{byte&#124;bit}2%select{&#124;s}3 to alignment boundary -Wparentheses using the result of an assignment as a condition without parentheses -Wparentheses %0 has lower precedence than %1 %1 will be evaluated first -Wparentheses operator ‘?:’ has lower precedence than ‘%0’ ‘%0’ will be evaluated first -Wparentheses-equality equality comparison with extraneous parentheses -Wpointer-arith subtraction of pointers to type %0 of zero size has undefined behavior -Wpredefined-identifier-outside-function predefined identifier is only valid inside function -Wprivate-extern use of private_extern on a declaration may not produce external symbol private to the linkage unit and is deprecated -Wprotocol method %0 in protocol not implemented -Wprotocol-property-synthesis-ambiguity property of type %0 was selected for synthesis -Wreadonly-iboutlet-property readonly IBOutlet property ‘%0’ when auto-synthesized may not work correctly with ‘nib’ loader -Wreadonly-setter-attrs property attributes ‘%0’ and ‘%1’ are mutually exclusive -Wreceiver-expr receiver type %0 is not ‘id’ or interface pointer, consider casting it to ‘id’ -Wreceiver-forward-class receiver type %0 for instance message is a forward declaration -Wreceiver-is-weak “weak %select{receiver&#124;property&#124;implicit property}0 may be unpredictably set to nil -Wreinterpret-base-class ‘reinterpret_cast’ %select{from&#124;to}3 class %0 %select{to&#124;from}3 its %select{virtual base&#124;base at non-zero offset}2 %1 behaves differently from ‘static_cast’ -Wreorder %select{field&#124;base class}0 %1 will be initialized after %select{field&#124;base}2 %3 -Wrequires-super-attribute %0 attribute cannot be applied to %select{methods in protocols&#124;dealloc}1 -Wreturn-stack-address returning address of local temporary object -Wreturn-stack-address returning address of label, which is local -Wreturn-stack-address address of stack memory associated with local variable %0 returned -Wreturn-stack-address reference to stack memory associated with local variable %0 returned -Wreturn-stack-address returning reference to local temporary object -Wreturn-type control may reach end of non-void function -Wreturn-type non-void %select{function&#124;method}1 %0 should return a value, DefaultError -Wreturn-type control reaches end of non-void function -Wreturn-type-c-linkage %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C -Wreturn-type-c-linkage %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C -Wsection section does not match previous declaration -Wselector creating selector for nonexistent method %0 -Wselector-type-mismatch multiple selectors named %0 found -Wself-assign explicitly assigning a variable of type %0 to itself -Wself-assign-field assigning %select{field&#124;instance variable}0 to itself -Wsentinel “missing sentinel in %select{function call&#124;method dispatch&#124;block call}0 -Wsentinel not enough variable arguments in %0 declaration to fit a sentinel -Wshadow declaration shadows a %select{“ “local variable&#124;” “variable in %2&#124;” “static data member of %2&#124;” “field of %2}1 -Wshadow-ivar local declaration of %0 hides instance variable -Wshift-count-negative shift count is negative -Wshift-count-overflow shift count = width of type -Wshift-op-parentheses operator ‘%0’ has lower precedence than ‘%1’ ‘%1’ will be evaluated first -Wshift-overflow signed shift result (%0) requires %1 bits to represent, but %2 only has %3 bits -Wshift-sign-overflow signed shift result (%0) sets the sign bit of the shift expression’s type (%1) and becomes negative -Wshorten-64-to-32 implicit conversion loses integer precision: %0 to %1 -Wsign-compare comparison of integers of different signs: %0 and %1 -Wsign-conversion implicit conversion changes signedness: %0 to %1 -Wsign-conversion operand of ? changes signedness: %0 to %1 -Wsizeof-array-argument sizeof on array function parameter will return size of %0 instead of %1 -Wsizeof-array-decay sizeof on pointer operation will return size of %0 instead of %1 -Wsizeof-pointer-memaccess ‘%0’ call operates on objects of type %1 while the size is based on a “ “different type %2 -Wsizeof-pointer-memaccess argument to ‘sizeof’ in %0 call is the same pointer type %1 as the %select{destination&#124;source}2 expected %3 or an explicit length -Wsometimes-uninitialized variable %0 is %select{used&#124;captured}1 uninitialized whenever %select{‘%3’ condition is %select{true&#124;false}4&#124;’%3’ loop %select{is entered&#124;exits because its condition is false}4&#124;’%3’ loop %select{condition is true&#124;exits because its condition is false}4&#124;switch %3 is taken&#124;its declaration is reached&#124;%3 is called}2 -Wstatic-local-in-inline non-constant static local variable in inline function may be different in different files -Wstatic-self-init static variable %0 is suspiciously used within its own initialization -Wstrict-selector-match multiple methods named %0 found -Wstring-compare result of comparison against %select{a string literal&#124;@encode}0 is unspecified (use strncmp instead) -Wstring-conversion implicit conversion turns string literal into bool: %0 to %1 -Wstring-plus-char adding %0 to a string pointer does not append to the string -Wstring-plus-int adding %0 to a string does not append to the string -Wstrlcpy-strlcat-size size argument in %0 call appears to be size of the source expected the size of the destination -Wstrncat-size the value of the size argument in ‘strncat’ is too large, might lead to a “ “buffer overflow -Wstrncat-size size argument in ‘strncat’ call appears “ “to be size of the source -Wstrncat-size the value of the size argument to ‘strncat’ is wrong -Wsuper-class-method-mismatch method parameter type %diff{$ does not match super class method parameter type $&#124;does not match super class method parameter type}0,1 -Wswitch overflow converting case value to switch condition type (%0 to %1) -Wswitch case value not in enumerated type %0 -Wswitch %0 enumeration values not handled in switch: %1, %2, %3… -Wswitch enumeration values %0 and %1 not handled in switch -Wswitch enumeration value %0 not handled in switch -Wswitch enumeration values %0, %1, and %2 not handled in switch -Wswitch-enum enumeration values %0, %1, and %2 not explicitly handled in switch -Wswitch-enum enumeration values %0 and %1 not explicitly handled in switch -Wswitch-enum %0 enumeration values not explicitly handled in switch: %1, %2, %3… -Wswitch-enum enumeration value %0 not explicitly handled in switch -Wtautological-compare comparison of %0 unsigned%select{&#124; enum}2 expression is always %1 -Wtautological-compare %select{self-&#124;array }0comparison always evaluates to %select{false&#124;true&#124;a constant}1 -Wtautological-compare comparison of unsigned%select{&#124; enum}2 expression %0 is always %1 -Wtautological-constant-out-of-range-compare comparison of constant %0 with expression of type %1 is always %select{false&#124;true}2 -Wthread-safety-analysis locking ‘%0’ that is already locked -Wthread-safety-analysis cannot call function ‘%0’ while mutex ‘%1’ is locked -Wthread-safety-analysis %select{reading&#124;writing}2 the value pointed to by ‘%0’ requires locking %select{‘%1’&#124;’%1’ exclusively}2 -Wthread-safety-analysis unlocking ‘%0’ that was not locked -Wthread-safety-analysis mutex ‘%0’ is locked exclusively and shared in the same scope -Wthread-safety-analysis calling function ‘%0’ requires %select{shared&#124;exclusive}2 lock on ‘%1’ -Wthread-safety-analysis %select{reading&#124;writing}2 variable ‘%0’ requires locking %select{‘%1’&#124;’%1’ exclusively}2 -Wthread-safety-analysis cannot resolve lock expression -Wthread-safety-analysis expecting mutex ‘%0’ to be locked at the end of function -Wthread-safety-analysis mutex ‘%0’ is not locked on every path through here -Wthread-safety-analysis %select{reading&#124;writing}1 the value pointed to by ‘%0’ requires locking %select{any mutex&#124;any mutex exclusively}1 -Wthread-safety-analysis %select{reading&#124;writing}1 variable ‘%0’ requires locking %select{any mutex&#124;any mutex exclusively}1 -Wthread-safety-analysis mutex ‘%0’ is still locked at the end of function -Wthread-safety-analysis expecting mutex ‘%0’ to be locked at start of each loop -Wthread-safety-attributes ignoring %0 attribute because its argument is invalid -Wthread-safety-attributes %0 attribute only applies to %select{fields and global variables&#124;functions and methods&#124;classes and structs}1 -Wthread-safety-attributes %0 attribute requires arguments that are class type or point to class type type here is ‘%1’ -Wthread-safety-attributes %0 attribute can only be applied in a context annotated with ‘lockable’ attribute -Wthread-safety-attributes %0 attribute requires arguments whose type is annotated with ‘lockable’ attribute type here is ‘%1’ -Wthread-safety-attributes ‘%0’ only applies to pointer types type here is %1 -Wthread-safety-beta Thread safety beta warning. -Wthread-safety-precise %select{reading&#124;writing}2 the value pointed to by ‘%0’ requires locking %select{‘%1’&#124;’%1’ exclusively}2 -Wthread-safety-precise %select{reading&#124;writing}2 variable ‘%0’ requires locking %select{‘%1’&#124;’%1’ exclusively}2 -Wthread-safety-precise calling function ‘%0’ requires %select{shared&#124;exclusive}2 lock on ‘%1’ -Wtype-safety this type tag was not designed to be used with this function -Wtype-safety specified %0 type tag requires a null pointer -Wtype-safety argument type %0 doesn’t match specified ‘%1’ type tag %select{that requires %3&#124;}2 -Wundeclared-selector undeclared selector %0 did you mean %1? -Wundeclared-selector undeclared selector %0 -Wundefined-inline inline function %q0 is not defined -Wundefined-internal %select{function&#124;variable}0 %q1 has internal linkage but is not defined -Wundefined-reinterpret-cast dereference of type %1 that was reinterpret_cast from type %0 has undefined behavior -Wundefined-reinterpret-cast reinterpret_cast from %0 to %1 has undefined behavior -Wuninitialized reference %0 is not yet bound to a value when used within its own initialization -Wuninitialized field %0 is uninitialized when used here -Wuninitialized block pointer variable %0 is uninitialized when captured by block -Wuninitialized variable %0 is uninitialized when used within its own initialization -Wuninitialized variable %0 is uninitialized when %select{used here&#124;captured by block}1 -Wuninitialized reference %0 is not yet bound to a value when used here -Wunneeded-internal-declaration %select{function&#124;variable}0 %1 is not needed and will not be emitted -Wunneeded-internal-declaration ‘static’ function %0 declared in header file should be declared ‘static inline’ -Wunneeded-member-function member function %0 is not needed and will not be emitted -Wunreachable-code will never be executed -Wunsequenced multiple unsequenced modifications to %0 -Wunsequenced unsequenced modification and access to %0 -Wunsupported-friend dependent nested name specifier ‘%0’ for friend template declaration is not supported ignoring this friend declaration -Wunsupported-friend dependent nested name specifier ‘%0’ for friend class declaration is not supported turning off access control for %1 -Wunsupported-visibility target does not support ‘protected’ visibility using ‘default’ -Wunused-comparison %select{equality&#124;inequality}0 comparison result unused -Wunused-const-variable unused variable %0 -Wunused-exception-parameter unused exception parameter %0 -Wunused-function unused function %0 -Wunused-label unused label %0 -Wunused-member-function unused member function %0 -Wunused-parameter unused parameter %0 -Wunused-private-field private field %0 is not used -Wunused-property-ivar ivar %0 which backs the property is not referenced in this property’s accessor -Wunused-result ignoring return value of function declared with warn_unused_result attribute -Wunused-value ignoring return value of function declared with %0 attribute -Wunused-value expression result unused should this cast be to ‘void’? -Wunused-value expression result unused -Wunused-variable unused variable %0 -Wunused-volatile-lvalue expression result unused assign into a variable to force a volatile load -Wused-but-marked-unused %0 was marked unused but was used -Wuser-defined-literals user-defined literal suffixes not starting with ‘_’ are reserved%select{ no literal will invoke this operator&#124;}0 -Wvarargs second parameter of ‘va_start’ not last named argument -Wvarargs ‘va_start’ has undefined behavior with reference types -Wvarargs second argument to ‘va_arg’ is of promotable type %0 this va_arg has undefined behavior because arguments will be promoted to %1 -Wvector-conversion incompatible vector types %select{%diff{assigning to $ from $&#124;assigning to different types}0,1&#124;%diff{passing $ to parameter of type $&#124;passing to parameter of different type}0,1&#124;%diff{returning $ from a function with result type $&#124;returning from function with different return type}0,1&#124;% diff{converting $ to type $&#124;converting between types}0,1&#124;%diff{initializing $ with an expression of type $&#124;initializing with expression of different type}0,1&#124;%diff{sending $ to parameter of type $&#124;sending to parameter of different type}0,1&#124;%diff{casting $ to type $&#124;casting between types}0,1}2 -Wvexing-parse parentheses were disambiguated as a function declaration -Wvexing-parse empty parentheses interpreted as a function declaration -Wvisibility declaration of %0 will not be visible outside of this function -Wvisibility redefinition of %0 will not be visible outside of this function -Wvla variable length array used -Wvla-extension variable length arrays are a C99 feature -Wweak-template-vtables explicit template instantiation %0 will emit a vtable in every translation unit -Wweak-vtables %0 has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit Lexer Warnings(词法分析警告) table th:first-of-type { width: 20%; } Warning table th:nth-of-type(2) { width: 80%; } Message -W#pragma-messages %0 -W#warnings %0 -W#warnings %0 -Wambiguous-macro ambiguous expansion of macro %0 -Wauto-import treating #%select{include&#124;import&#124;include_next&#124;__include_macros}0 as an import of module ‘%1’ -Wbackslash-newline-escape backslash and newline separated by space -Wc++11-compat identifier after literal will be treated as a user-defined literal suffix in C++11 -Wc++11-compat ‘%0’ is a keyword in C++11 -Wc++98-c++11-compat digit separators are incompatible with C++ standards before C++1y -Wc++98-c++11-compat-pedantic binary integer literals are incompatible with C++ standards before C++1y -Wc++98-compat raw string literals are incompatible with C++98 -Wc++98-compat unicode literals are incompatible with C++98 -Wc++98-compat universal character name referring to a control character is incompatible with C++98 -Wc++98-compat ‘::’ is treated as digraph ‘:’ (aka ‘[‘) followed by ‘:’ in C++98 -Wc++98-compat using this character in an identifier is incompatible with C++98 -Wc++98-compat specifying character ‘%0’ with a universal character name is incompatible with C++98 -Wc++98-compat-pedantic variadic macros are incompatible with C++98 -Wc++98-compat-pedantic #line number greater than 32767 is incompatible with C++98 -Wc++98-compat-pedantic C++98 requires newline at end of file -Wc++98-compat-pedantic empty macro arguments are incompatible with C++98 -Wc99-compat unicode literals are incompatible with C99 -Wc99-compat %select{using this character in an identifier&#124;starting an identifier with this character}0 is incompatible with C99 -Wcomment ‘&#124;*’ within block comment -Wcomment escaped newline between *&#124; characters at block comment end -Wdisabled-macro-expansion disabled expansion of recursive macro -Wheader-guard %0 is used as a header guard here, followed by #define of a different macro -Wignored-attributes unknown attribute ‘%0’ -Wincomplete-module header ‘%0’ is included in module ‘%1’ but not listed in module map -Wincomplete-umbrella umbrella header for module ‘%0’ does not include header ‘%1’ -Winvalid-token-paste pasting formed ‘%0’, an invalid preprocessing token, DefaultError -Wmalformed-warning-check __has_warning expected option name (e.g. \”-Wundef\”) -Wnewline-eof no newline at end of file -Wnull-character null character ignored -Wnull-character null character(s) preserved in string literal -Wnull-character null character(s) preserved in character literal -Wtrigraphs ignored trigraph would end block comment -Wtrigraphs trigraph ignored -Wundef %0 is not defined, evaluates to 0 -Wunicode universal character names are only valid in C99 or C++ treating as ‘\‘ followed by identifier -Wunicode \%0 used with no following hex digits treating as ‘\‘ followed by identifier -Wunicode incomplete universal character name treating as ‘\‘ followed by identifier -Wunicode universal character name refers to a surrogate character -Wunknown-pragmas unknown pragma ignored -Wunknown-pragmas pragma STDC FENV_ACCESS ON is not supported, ignoring pragma -Wunused-macros macro is not used Parser Warnings(解析器警告) table th:first-of-type { width: 20%; } Warning table th:nth-of-type(2) { width: 80%; } Message -Warc-bridge-casts-disallowed-in-nonarc ‘%0’ casts have no effect when not using ARC -Wattributes unknown __declspec attribute %0 ignored -Wavailability ‘unavailable’ availability overrides all other availability information -Wc++11-compat use of right-shift operator (‘’) in template argument will require parentheses in C++11 -Wc++11-compat ‘auto’ storage class specifier is redundant and incompatible with C++11 -Wc++98-c++11-compat ‘decltype(auto)’ type specifier is incompatible with C++ standards before C++1y -Wc++98-compat range-based for loop is incompatible with C++98 -Wc++98-compat alias declarations are incompatible with C++98 -Wc++98-compat in-class initialization of non-static data members is incompatible with C++98 -Wc++98-compat defaulted function definitions are incompatible with C++98 -Wc++98-compat rvalue references are incompatible with C++98 -Wc++98-compat reference qualifiers on functions are incompatible with C++98 -Wc++98-compat inline namespaces are incompatible with C++98 -Wc++98-compat generalized initializer lists are incompatible with C++98 -Wc++98-compat trailing return types are incompatible with C++98 -Wc++98-compat enumeration types with a fixed underlying type are incompatible with C++98 -Wc++98-compat alignof expressions are incompatible with C++98 -Wc++98-compat ‘%0’ keyword is incompatible with C++98 -Wc++98-compat ‘decltype’ type specifier is incompatible with C++98 -Wc++98-compat deleted function definitions are incompatible with C++98 -Wc++98-compat consecutive right angle brackets are incompatible with C++98 (use ‘&gt; &gt;’) -Wc++98-compat static_assert declarations are incompatible with C++98 -Wc++98-compat scoped enumerations are incompatible with C++98 -Wc++98-compat lambda expressions are incompatible with C++98 -Wc++98-compat attributes are incompatible with C++98 -Wc++98-compat ‘alignas’ is incompatible with C++98 -Wc++98-compat noexcept specifications are incompatible with C++98 -Wc++98-compat literal operators are incompatible with C++98 -Wc++98-compat noexcept expressions are incompatible with C++98 -Wc++98-compat ‘nullptr’ is incompatible with C++98 -Wc++98-compat-pedantic extra ‘’ outside of a function is incompatible with C++98 -Wc++98-compat-pedantic extern templates are incompatible with C++98 -Wc++98-compat-pedantic commas at the end of enumerator lists are incompatible with C++98 -Wdangling-else add explicit braces to avoid dangling else -Wdeprecated Use of ‘long’ with ‘__vector’ is deprecated -Wdeprecated-declarations use of C-style parameters in Objective-C method declarations is deprecated -Wdeprecated-register ‘register’ storage class specifier is deprecated -Wduplicate-decl-specifier duplicate ‘%0’ declaration specifier -Wextra-semi extra ‘;’ after member function definition -Wextra-tokens “extra tokens at the end of ‘#pragma omp %0’ are ignored -Wgcc-compat GCC does not allow %0 attribute in this position on a function definition -Wignored-attributes attribute %0 ignored, because it is not attached to a declaration -Wmicrosoft-exists dependent %select{if_not_exists&#124;if_exists}0 declarations are ignored -Wmissing-selector-name %0 used as the name of the previous parameter rather than as part of the selector -Wsemicolon-before-method-body semicolon before method body is ignored -Wsource-uses-openmp “unexpected ‘#pragma omp …’ in program -Wstatic-inline-explicit-instantiation ignoring ‘%select{static&#124;inline}0’ keyword on explicit template instantiation]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Swift</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
</search>
